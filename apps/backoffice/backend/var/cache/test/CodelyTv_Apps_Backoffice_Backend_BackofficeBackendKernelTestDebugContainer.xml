<?xml version="1.0" encoding="utf-8"?>
<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">
  <parameters>
    <parameter key="kernel.project_dir">/app/apps/backoffice/backend</parameter>
    <parameter key="kernel.environment">test</parameter>
    <parameter key="kernel.runtime_environment">%env(default:kernel.environment:APP_RUNTIME_ENV)%</parameter>
    <parameter key="kernel.runtime_mode">%env(query_string:default:container.runtime_mode:APP_RUNTIME_MODE)%</parameter>
    <parameter key="kernel.runtime_mode.web">%env(bool:default::key:web:default:kernel.runtime_mode:)%</parameter>
    <parameter key="kernel.runtime_mode.cli">%env(not:default:kernel.runtime_mode.web:)%</parameter>
    <parameter key="kernel.runtime_mode.worker">%env(bool:default::key:worker:default:kernel.runtime_mode:)%</parameter>
    <parameter key="kernel.debug">true</parameter>
    <parameter key="kernel.build_dir">/app/apps/backoffice/backend/var/cache/test</parameter>
    <parameter key="kernel.cache_dir">/app/apps/backoffice/backend/var/cache/test</parameter>
    <parameter key="kernel.logs_dir">/app/apps/backoffice/backend/var/log</parameter>
    <parameter key="kernel.bundles" type="collection">
      <parameter key="FrameworkBundle">Symfony\Bundle\FrameworkBundle\FrameworkBundle</parameter>
      <parameter key="FriendsOfBehatSymfonyExtensionBundle">FriendsOfBehat\SymfonyExtension\Bundle\FriendsOfBehatSymfonyExtensionBundle</parameter>
    </parameter>
    <parameter key="kernel.bundles_metadata" type="collection">
      <parameter key="FrameworkBundle" type="collection">
        <parameter key="path">/app/vendor/symfony/framework-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\FrameworkBundle</parameter>
      </parameter>
      <parameter key="FriendsOfBehatSymfonyExtensionBundle" type="collection">
        <parameter key="path">/app/vendor/friends-of-behat/symfony-extension/src/Bundle</parameter>
        <parameter key="namespace">FriendsOfBehat\SymfonyExtension\Bundle</parameter>
      </parameter>
    </parameter>
    <parameter key="kernel.charset">UTF-8</parameter>
    <parameter key="kernel.container_class">CodelyTv_Apps_Backoffice_Backend_BackofficeBackendKernelTestDebugContainer</parameter>
    <parameter key=".container.dumper.inline_class_loader">true</parameter>
    <parameter key="event_dispatcher.event_aliases" type="collection">
      <parameter key="Symfony\Component\Console\Event\ConsoleCommandEvent">console.command</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleErrorEvent">console.error</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleSignalEvent">console.signal</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleTerminateEvent">console.terminate</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent">kernel.controller_arguments</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ControllerEvent">kernel.controller</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ResponseEvent">kernel.response</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\FinishRequestEvent">kernel.finish_request</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\RequestEvent">kernel.request</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ViewEvent">kernel.view</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ExceptionEvent">kernel.exception</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\TerminateEvent">kernel.terminate</parameter>
    </parameter>
    <parameter key="fragment.renderer.hinclude.global_template">null</parameter>
    <parameter key="fragment.path">/_fragment</parameter>
    <parameter key="kernel.secret">%env(APP_SECRET)%</parameter>
    <parameter key="kernel.http_method_override">false</parameter>
    <parameter key="kernel.trust_x_sendfile_type_header">false</parameter>
    <parameter key="kernel.trusted_hosts" type="collection"/>
    <parameter key="kernel.default_locale">en</parameter>
    <parameter key="kernel.enabled_locales" type="collection"/>
    <parameter key="kernel.error_controller">error_controller</parameter>
    <parameter key="debug.file_link_format">%env(default::SYMFONY_IDE)%</parameter>
    <parameter key="test.client.parameters" type="collection"/>
    <parameter key="debug.error_handler.throw_at">-1</parameter>
    <parameter key="debug.container.dump">/app/apps/backoffice/backend/var/cache/test/CodelyTv_Apps_Backoffice_Backend_BackofficeBackendKernelTestDebugContainer.xml</parameter>
    <parameter key="router.request_context.host">localhost</parameter>
    <parameter key="router.request_context.scheme">http</parameter>
    <parameter key="router.request_context.base_url"></parameter>
    <parameter key="router.resource">kernel::loadRoutes</parameter>
    <parameter key="router.cache_dir">/app/apps/backoffice/backend/var/cache/test</parameter>
    <parameter key="request_listener.http_port">80</parameter>
    <parameter key="request_listener.https_port">443</parameter>
    <parameter key="cache.prefix.seed">_/app/apps/backoffice/backend.CodelyTv_Apps_Backoffice_Backend_BackofficeBackendKernelTestDebugContainer</parameter>
    <parameter key="session.metadata.storage_key">_sf2_meta</parameter>
    <parameter key="session.storage.options" type="collection">
      <parameter key="cache_limiter" type="string">0</parameter>
      <parameter key="cookie_secure">auto</parameter>
      <parameter key="cookie_httponly">true</parameter>
      <parameter key="cookie_samesite">lax</parameter>
      <parameter key="gc_probability">1</parameter>
    </parameter>
    <parameter key="session.save_path">null</parameter>
    <parameter key="session.metadata.update_threshold">0</parameter>
    <parameter key="validator.mapping.cache.file">/app/apps/backoffice/backend/var/cache/test/validation.php</parameter>
    <parameter key="validator.translation_domain">validators</parameter>
    <parameter key="data_collector.templates" type="collection"/>
    <parameter key="console.command.ids" type="collection"/>
  </parameters>
  <services>
    <service id="service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" synthetic="true"/>
    <service id="kernel" class="CodelyTv\Apps\Backoffice\Backend\BackofficeBackendKernel" public="true" synthetic="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="routing.route_loader"/>
    </service>
    <service id="Doctrine\ORM\EntityManager" class="Doctrine\ORM\EntityManager" public="true">
      <tag name="codely.database_connection"/>
      <argument type="collection">
        <argument key="driver">%env(MOOC_DATABASE_DRIVER)%</argument>
        <argument key="host">%env(MOOC_DATABASE_HOST)%</argument>
        <argument key="port">%env(MOOC_DATABASE_PORT)%</argument>
        <argument key="dbname">%env(MOOC_DATABASE_NAME)%</argument>
        <argument key="user">%env(MOOC_DATABASE_USER)%</argument>
        <argument key="password">%env(MOOC_DATABASE_PASSWORD)%</argument>
      </argument>
      <argument>%env(APP_ENV)%</argument>
      <factory class="CodelyTv\Mooc\Shared\Infrastructure\Doctrine\MoocEntityManagerFactory" method="create"/>
    </service>
    <service id="CodelyTv\Apps\Backoffice\Backend\Controller\Courses\CoursesGetController" class="CodelyTv\Apps\Backoffice\Backend\Controller\Courses\CoursesGetController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBus"/>
    </service>
    <service id="CodelyTv\Apps\Backoffice\Backend\Controller\HealthCheck\HealthCheckGetController" class="CodelyTv\Apps\Backoffice\Backend\Controller\HealthCheck\HealthCheckGetController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="CodelyTv\Apps\Backoffice\Backend\Controller\Metrics\MetricsController" class="CodelyTv\Apps\Backoffice\Backend\Controller\Metrics\MetricsController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Monitoring\PrometheusMonitor"/>
    </service>
    <service id="CodelyTv\Shared\Domain\Assert" class="CodelyTv\Shared\Domain\Assert" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Domain\Criteria\Criteria" class="CodelyTv\Shared\Domain\Criteria\Criteria" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Shared\Domain\Criteria\Criteria&quot;: argument &quot;$offset&quot; of method &quot;__construct()&quot; is type-hinted &quot;int&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Shared\Domain\Criteria\Filter" class="CodelyTv\Shared\Domain\Criteria\Filter" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Shared\Domain\Criteria\Filter&quot;: argument &quot;$operator&quot; of method &quot;__construct()&quot; references class &quot;CodelyTv\Shared\Domain\Criteria\FilterOperator&quot; but no such service exists."/>
    </service>
    <service id="CodelyTv\Shared\Domain\Criteria\FilterField" class="CodelyTv\Shared\Domain\Criteria\FilterField" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Shared\Domain\Criteria\FilterField&quot;: argument &quot;$value&quot; of method &quot;CodelyTv\Shared\Domain\ValueObject\StringValueObject::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Shared\Domain\Criteria\FilterValue" class="CodelyTv\Shared\Domain\Criteria\FilterValue" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Shared\Domain\Criteria\FilterValue&quot;: argument &quot;$value&quot; of method &quot;CodelyTv\Shared\Domain\ValueObject\StringValueObject::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Shared\Domain\Criteria\Filters" class="CodelyTv\Shared\Domain\Criteria\Filters" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Shared\Domain\Criteria\Filters&quot;: argument &quot;$items&quot; of method &quot;CodelyTv\Shared\Domain\Collection::__construct()&quot; is type-hinted &quot;array&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Shared\Domain\Criteria\Order" class="CodelyTv\Shared\Domain\Criteria\Order" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Shared\Domain\Criteria\Order&quot;: argument &quot;$orderType&quot; of method &quot;__construct()&quot; references class &quot;CodelyTv\Shared\Domain\Criteria\OrderType&quot; but no such service exists."/>
    </service>
    <service id="CodelyTv\Shared\Domain\Criteria\OrderBy" class="CodelyTv\Shared\Domain\Criteria\OrderBy" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Shared\Domain\Criteria\OrderBy&quot;: argument &quot;$value&quot; of method &quot;CodelyTv\Shared\Domain\ValueObject\StringValueObject::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Shared\Domain\Second" class="CodelyTv\Shared\Domain\Second" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Shared\Domain\Second&quot;: argument &quot;$value&quot; of method &quot;CodelyTv\Shared\Domain\ValueObject\IntValueObject::__construct()&quot; is type-hinted &quot;int&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Shared\Domain\SecondsInterval" class="CodelyTv\Shared\Domain\SecondsInterval" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Shared\Domain\Second"/>
      <argument type="service" id="CodelyTv\Shared\Domain\Second"/>
    </service>
    <service id="CodelyTv\Shared\Domain\Utils" class="CodelyTv\Shared\Domain\Utils" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Domain\ValueObject\SimpleUuid" class="CodelyTv\Shared\Domain\ValueObject\SimpleUuid" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Shared\Domain\ValueObject\SimpleUuid&quot;: argument &quot;$value&quot; of method &quot;CodelyTv\Shared\Domain\ValueObject\Uuid::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\CallableFirstParameterExtractor" class="CodelyTv\Shared\Infrastructure\Bus\CallableFirstParameterExtractor" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Command\CommandNotRegisteredError" class="CodelyTv\Shared\Infrastructure\Bus\Command\CommandNotRegisteredError" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommand"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBus" class="CodelyTv\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBus" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="codely.command_handler"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventJsonDeserializer" class="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventJsonDeserializer" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventMapping"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventJsonSerializer" class="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventJsonSerializer" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventMapping" class="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventMapping" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="codely.domain_event_subscriber"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventSubscriberLocator" class="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventSubscriberLocator" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="codely.domain_event_subscriber"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Event\InMemory\InMemorySymfonyEventBus" class="CodelyTv\Shared\Infrastructure\Bus\Event\InMemory\InMemorySymfonyEventBus" lazy="true" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="codely.domain_event_subscriber"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineDomainEventsConsumer" class="CodelyTv\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineDomainEventsConsumer" autowire="true" autoconfigure="true">
      <argument type="service" id="Doctrine\ORM\EntityManager"/>
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventMapping"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineEventBus" class="CodelyTv\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineEventBus" autowire="true" autoconfigure="true">
      <argument type="service" id="Doctrine\ORM\EntityManager"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConfigurer" class="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConfigurer" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConnection"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConnection" class="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConnection" autowire="true" autoconfigure="true">
      <argument type="collection">
        <argument key="host">%env(RABBITMQ_HOST)%</argument>
        <argument key="port">%env(RABBITMQ_PORT)%</argument>
        <argument key="vhost">%env(RABBITMQ_MOOC_VHOST)%</argument>
        <argument key="login">%env(RABBITMQ_LOGIN)%</argument>
        <argument key="password">%env(RABBITMQ_PASSWORD)%</argument>
        <argument key="read_timeout">2</argument>
        <argument key="write_timeout">2</argument>
        <argument key="connect_timeout">5</argument>
      </argument>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqDomainEventsConsumer" class="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqDomainEventsConsumer" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqDomainEventsConsumer&quot;: argument &quot;$exchangeName&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBus" class="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBus" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConnection"/>
      <argument>%env(RABBITMQ_EXCHANGE)%</argument>
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineEventBus"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqExchangeNameFormatter" class="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqExchangeNameFormatter" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqQueueNameFormatter" class="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqQueueNameFormatter" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Event\WithMonitoring\WithPrometheusMonitoringEventBus" class="CodelyTv\Shared\Infrastructure\Bus\Event\WithMonitoring\WithPrometheusMonitoringEventBus" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Monitoring\PrometheusMonitor"/>
      <argument>backoffice_backend</argument>
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBus"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBus" class="CodelyTv\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBus" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="codely.query_handler"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Bus\Query\QueryNotRegisteredError" class="CodelyTv\Shared\Infrastructure\Bus\Query\QueryNotRegisteredError" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Shared\Infrastructure\Bus\Query\QueryNotRegisteredError&quot;: argument &quot;$query&quot; of method &quot;__construct()&quot; references interface &quot;CodelyTv\Shared\Domain\Bus\Query\Query&quot; but no such service exists. You should maybe alias this interface to one of these existing services: &quot;CodelyTv\Backoffice\Courses\Application\SearchAll\SearchAllBackofficeCoursesQuery&quot;, &quot;CodelyTv\Backoffice\Courses\Application\SearchByCriteria\SearchBackofficeCoursesByCriteriaQuery&quot;, &quot;CodelyTv\Tests\Shared\Infrastructure\Bus\Query\FakeQuery&quot;."/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Doctrine\DatabaseConnections" class="CodelyTv\Shared\Infrastructure\Doctrine\DatabaseConnections" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="codely.database_connection"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Doctrine\Dbal\DbalCustomTypesRegistrar" class="CodelyTv\Shared\Infrastructure\Doctrine\Dbal\DbalCustomTypesRegistrar" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Infrastructure\Doctrine\DoctrineEntityManagerFactory" class="CodelyTv\Shared\Infrastructure\Doctrine\DoctrineEntityManagerFactory" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Infrastructure\Elasticsearch\ElasticsearchClient" class="CodelyTv\Shared\Infrastructure\Elasticsearch\ElasticsearchClient" public="true" autowire="true" autoconfigure="true">
      <argument>%env(BACKOFFICE_ELASTICSEARCH_HOST)%</argument>
      <argument>%env(BACKOFFICE_ELASTICSEARCH_INDEX_PREFIX)%</argument>
      <argument>/app/apps/backoffice/backend/../../../etc/databases/backoffice</argument>
      <argument>%env(APP_ENV)%</argument>
      <factory service="CodelyTv\Shared\Infrastructure\Elasticsearch\ElasticsearchClientFactory" method="__invoke"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Elasticsearch\ElasticsearchClientFactory" class="CodelyTv\Shared\Infrastructure\Elasticsearch\ElasticsearchClientFactory" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Infrastructure\Logger\MonologLogger" class="CodelyTv\Shared\Infrastructure\Logger\MonologLogger" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Shared\Infrastructure\Logger\MonologLogger&quot;: argument &quot;$logger&quot; of method &quot;__construct()&quot; references class &quot;Monolog\Logger&quot; but no such service exists. Try changing the type-hint to &quot;Psr\Log\LoggerInterface&quot; instead."/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Monitoring\PrometheusMonitor" class="CodelyTv\Shared\Infrastructure\Monitoring\PrometheusMonitor" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Infrastructure\Persistence\Doctrine\DoctrineCriteriaConverter" class="CodelyTv\Shared\Infrastructure\Persistence\Doctrine\DoctrineCriteriaConverter" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Shared\Domain\Criteria\Criteria"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Persistence\Elasticsearch\ElasticQueryGenerator" class="CodelyTv\Shared\Infrastructure\Persistence\Elasticsearch\ElasticQueryGenerator" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Infrastructure\Persistence\Elasticsearch\ElasticsearchCriteriaConverter" class="CodelyTv\Shared\Infrastructure\Persistence\Elasticsearch\ElasticsearchCriteriaConverter" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Infrastructure\PhpRandomNumberGenerator" class="CodelyTv\Shared\Infrastructure\PhpRandomNumberGenerator" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Infrastructure\RamseyUuidGenerator" class="CodelyTv\Shared\Infrastructure\RamseyUuidGenerator" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Infrastructure\Symfony\AddJsonBodyToRequestListener" class="CodelyTv\Shared\Infrastructure\Symfony\AddJsonBodyToRequestListener" autowire="true" autoconfigure="true">
      <tag name="kernel.event_listener" event="kernel.request" method="onKernelRequest"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Symfony\ApiExceptionListener" class="CodelyTv\Shared\Infrastructure\Symfony\ApiExceptionListener" autowire="true" autoconfigure="true">
      <tag name="kernel.event_listener" event="kernel.exception" method="onException"/>
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Symfony\ApiExceptionsHttpStatusCodeMapping"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Symfony\ApiExceptionsHttpStatusCodeMapping" class="CodelyTv\Shared\Infrastructure\Symfony\ApiExceptionsHttpStatusCodeMapping" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware" class="CodelyTv\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware" autowire="true" autoconfigure="true">
      <tag name="kernel.event_listener" event="kernel.request" method="onKernelRequest"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBus"/>
    </service>
    <service id="CodelyTv\Shared\Infrastructure\Symfony\FlashSession" class="CodelyTv\Shared\Infrastructure\Symfony\FlashSession" autowire="true" autoconfigure="true">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommand" class="CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommand" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommand&quot;: argument &quot;$username&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandHandler" class="CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandHandler" autowire="true" autoconfigure="true">
      <tag name="codely.command_handler"/>
      <argument type="service" id="CodelyTv\Backoffice\Auth\Application\Authenticate\UserAuthenticator"/>
    </service>
    <service id="CodelyTv\Backoffice\Auth\Application\Authenticate\UserAuthenticator" class="CodelyTv\Backoffice\Auth\Application\Authenticate\UserAuthenticator" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Backoffice\Auth\Infrastructure\Persistence\InMemoryAuthRepository"/>
    </service>
    <service id="CodelyTv\Backoffice\Auth\Domain\AuthPassword" class="CodelyTv\Backoffice\Auth\Domain\AuthPassword" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Backoffice\Auth\Domain\AuthPassword&quot;: argument &quot;$value&quot; of method &quot;CodelyTv\Shared\Domain\ValueObject\StringValueObject::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Backoffice\Auth\Domain\AuthUser" class="CodelyTv\Backoffice\Auth\Domain\AuthUser" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Backoffice\Auth\Domain\AuthUsername"/>
      <argument type="service" id="CodelyTv\Backoffice\Auth\Domain\AuthPassword"/>
    </service>
    <service id="CodelyTv\Backoffice\Auth\Domain\AuthUsername" class="CodelyTv\Backoffice\Auth\Domain\AuthUsername" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Backoffice\Auth\Domain\AuthUsername&quot;: argument &quot;$value&quot; of method &quot;CodelyTv\Shared\Domain\ValueObject\StringValueObject::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Backoffice\Auth\Domain\InvalidAuthCredentials" class="CodelyTv\Backoffice\Auth\Domain\InvalidAuthCredentials" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Backoffice\Auth\Domain\AuthUsername"/>
    </service>
    <service id="CodelyTv\Backoffice\Auth\Domain\InvalidAuthUsername" class="CodelyTv\Backoffice\Auth\Domain\InvalidAuthUsername" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Backoffice\Auth\Domain\AuthUsername"/>
    </service>
    <service id="CodelyTv\Backoffice\Auth\Infrastructure\Persistence\InMemoryAuthRepository" class="CodelyTv\Backoffice\Auth\Infrastructure\Persistence\InMemoryAuthRepository" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Backoffice\Courses\Application\BackofficeCourseResponse" class="CodelyTv\Backoffice\Courses\Application\BackofficeCourseResponse" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Backoffice\Courses\Application\BackofficeCourseResponse&quot;: argument &quot;$id&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Backoffice\Courses\Application\BackofficeCoursesResponse" class="CodelyTv\Backoffice\Courses\Application\BackofficeCoursesResponse" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Backoffice\Courses\Application\Create\BackofficeCourseCreator" class="CodelyTv\Backoffice\Courses\Application\Create\BackofficeCourseCreator" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\ElasticsearchBackofficeCourseRepository"/>
    </service>
    <service id="CodelyTv\Backoffice\Courses\Application\Create\CreateBackofficeCourseOnCourseCreated" class="CodelyTv\Backoffice\Courses\Application\Create\CreateBackofficeCourseOnCourseCreated" autowire="true" autoconfigure="true">
      <tag name="codely.domain_event_subscriber"/>
      <argument type="service" id="CodelyTv\Backoffice\Courses\Application\Create\BackofficeCourseCreator"/>
    </service>
    <service id="CodelyTv\Backoffice\Courses\Application\SearchAll\AllBackofficeCoursesSearcher" class="CodelyTv\Backoffice\Courses\Application\SearchAll\AllBackofficeCoursesSearcher" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\ElasticsearchBackofficeCourseRepository"/>
    </service>
    <service id="CodelyTv\Backoffice\Courses\Application\SearchAll\SearchAllBackofficeCoursesQuery" class="CodelyTv\Backoffice\Courses\Application\SearchAll\SearchAllBackofficeCoursesQuery" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Backoffice\Courses\Application\SearchAll\SearchAllBackofficeCoursesQueryHandler" class="CodelyTv\Backoffice\Courses\Application\SearchAll\SearchAllBackofficeCoursesQueryHandler" autowire="true" autoconfigure="true">
      <tag name="codely.query_handler"/>
      <argument type="service" id="CodelyTv\Backoffice\Courses\Application\SearchAll\AllBackofficeCoursesSearcher"/>
    </service>
    <service id="CodelyTv\Backoffice\Courses\Application\SearchByCriteria\BackofficeCoursesByCriteriaSearcher" class="CodelyTv\Backoffice\Courses\Application\SearchByCriteria\BackofficeCoursesByCriteriaSearcher" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\ElasticsearchBackofficeCourseRepository"/>
    </service>
    <service id="CodelyTv\Backoffice\Courses\Application\SearchByCriteria\SearchBackofficeCoursesByCriteriaQuery" class="CodelyTv\Backoffice\Courses\Application\SearchByCriteria\SearchBackofficeCoursesByCriteriaQuery" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Backoffice\Courses\Application\SearchByCriteria\SearchBackofficeCoursesByCriteriaQuery&quot;: argument &quot;$filters&quot; of method &quot;__construct()&quot; is type-hinted &quot;array&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Backoffice\Courses\Application\SearchByCriteria\SearchBackofficeCoursesByCriteriaQueryHandler" class="CodelyTv\Backoffice\Courses\Application\SearchByCriteria\SearchBackofficeCoursesByCriteriaQueryHandler" autowire="true" autoconfigure="true">
      <tag name="codely.query_handler"/>
      <argument type="service" id="CodelyTv\Backoffice\Courses\Application\SearchByCriteria\BackofficeCoursesByCriteriaSearcher"/>
    </service>
    <service id="CodelyTv\Backoffice\Courses\Domain\BackofficeCourse" class="CodelyTv\Backoffice\Courses\Domain\BackofficeCourse" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Backoffice\Courses\Domain\BackofficeCourse&quot;: argument &quot;$id&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\ElasticsearchBackofficeCourseRepository" class="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\ElasticsearchBackofficeCourseRepository" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Elasticsearch\ElasticsearchClient"/>
    </service>
    <service id="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\InMemoryCacheBackofficeCourseRepository" class="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\InMemoryCacheBackofficeCourseRepository" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\ElasticsearchBackofficeCourseRepository"/>
    </service>
    <service id="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\MySqlBackofficeCourseRepository" class="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\MySqlBackofficeCourseRepository" autowire="true" autoconfigure="true">
      <argument type="service" id="Doctrine\ORM\EntityManager"/>
    </service>
    <service id="CodelyTv\Tests\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandHandlerTest" class="CodelyTv\Tests\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandHandlerTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandMother" class="CodelyTv\Tests\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Backoffice\Auth\Domain\AuthPasswordMother" class="CodelyTv\Tests\Backoffice\Auth\Domain\AuthPasswordMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Backoffice\Auth\Domain\AuthUserMother" class="CodelyTv\Tests\Backoffice\Auth\Domain\AuthUserMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Backoffice\Auth\Domain\AuthUsernameMother" class="CodelyTv\Tests\Backoffice\Auth\Domain\AuthUsernameMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Backoffice\Courses\Domain\BackofficeCourseCriteriaMother" class="CodelyTv\Tests\Backoffice\Courses\Domain\BackofficeCourseCriteriaMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Backoffice\Courses\Domain\BackofficeCourseMother" class="CodelyTv\Tests\Backoffice\Courses\Domain\BackofficeCourseMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Backoffice\Courses\Infrastructure\Persistence\ElasticsearchBackofficeCourseRepositoryTest" class="CodelyTv\Tests\Backoffice\Courses\Infrastructure\Persistence\ElasticsearchBackofficeCourseRepositoryTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Backoffice\Courses\Infrastructure\Persistence\MySqlBackofficeCourseRepositoryTest" class="CodelyTv\Tests\Backoffice\Courses\Infrastructure\Persistence\MySqlBackofficeCourseRepositoryTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Backoffice\Shared\Infraestructure\PhpUnit\BackofficeEnvironmentArranger" class="CodelyTv\Tests\Backoffice\Shared\Infraestructure\PhpUnit\BackofficeEnvironmentArranger" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Elasticsearch\ElasticsearchClient"/>
      <argument type="service" id="Doctrine\ORM\EntityManager"/>
    </service>
    <service id="CodelyTv\Tests\Mooc\Courses\Application\Create\CreateCourseCommandHandlerTest" class="CodelyTv\Tests\Mooc\Courses\Application\Create\CreateCourseCommandHandlerTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Courses\Application\Create\CreateCourseCommandMother" class="CodelyTv\Tests\Mooc\Courses\Application\Create\CreateCourseCommandMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Courses\Application\Update\CourseRenamerTest" class="CodelyTv\Tests\Mooc\Courses\Application\Update\CourseRenamerTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Courses\Domain\CourseCreatedDomainEventMother" class="CodelyTv\Tests\Mooc\Courses\Domain\CourseCreatedDomainEventMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Courses\Domain\CourseDurationMother" class="CodelyTv\Tests\Mooc\Courses\Domain\CourseDurationMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Courses\Domain\CourseIdMother" class="CodelyTv\Tests\Mooc\Courses\Domain\CourseIdMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Courses\Domain\CourseMother" class="CodelyTv\Tests\Mooc\Courses\Domain\CourseMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Courses\Domain\CourseNameMother" class="CodelyTv\Tests\Mooc\Courses\Domain\CourseNameMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Courses\Infrastructure\Persistence\CourseRepositoryTest" class="CodelyTv\Tests\Mooc\Courses\Infrastructure\Persistence\CourseRepositoryTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\CoursesCounter\Application\Find\CoursesCounterResponseMother" class="CodelyTv\Tests\Mooc\CoursesCounter\Application\Find\CoursesCounterResponseMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\CoursesCounter\Application\Find\FindCoursesCounterQueryHandlerTest" class="CodelyTv\Tests\Mooc\CoursesCounter\Application\Find\FindCoursesCounterQueryHandlerTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\CoursesCounter\Application\Increment\IncrementCoursesCounterOnCourseCreatedTest" class="CodelyTv\Tests\Mooc\CoursesCounter\Application\Increment\IncrementCoursesCounterOnCourseCreatedTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterIdMother" class="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterIdMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterIncrementedDomainEventMother" class="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterIncrementedDomainEventMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterMother" class="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterTotalMother" class="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterTotalMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\MoocArchitectureTest" class="CodelyTv\Tests\Mooc\MoocArchitectureTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Shared\Infrastructure\PhpUnit\MoocEnvironmentArranger" class="CodelyTv\Tests\Mooc\Shared\Infrastructure\PhpUnit\MoocEnvironmentArranger" autowire="true" autoconfigure="true">
      <argument type="service" id="Doctrine\ORM\EntityManager"/>
    </service>
    <service id="CodelyTv\Tests\Mooc\Steps\Domain\Exercise\ExerciseStepContentMother" class="CodelyTv\Tests\Mooc\Steps\Domain\Exercise\ExerciseStepContentMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Steps\Domain\Exercise\ExerciseStepMother" class="CodelyTv\Tests\Mooc\Steps\Domain\Exercise\ExerciseStepMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Steps\Domain\Quiz\QuizStepMother" class="CodelyTv\Tests\Mooc\Steps\Domain\Quiz\QuizStepMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Steps\Domain\Quiz\QuizStepQuestionMother" class="CodelyTv\Tests\Mooc\Steps\Domain\Quiz\QuizStepQuestionMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Steps\Domain\StepDurationMother" class="CodelyTv\Tests\Mooc\Steps\Domain\StepDurationMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Steps\Domain\StepIdMother" class="CodelyTv\Tests\Mooc\Steps\Domain\StepIdMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Steps\Domain\StepTitleMother" class="CodelyTv\Tests\Mooc\Steps\Domain\StepTitleMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Steps\Domain\Video\VideoStepMother" class="CodelyTv\Tests\Mooc\Steps\Domain\Video\VideoStepMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Steps\Domain\Video\VideoStepUrlMother" class="CodelyTv\Tests\Mooc\Steps\Domain\Video\VideoStepUrlMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Mooc\Steps\Infrastructure\Persistence\MySqlStepRepositoryTest" class="CodelyTv\Tests\Mooc\Steps\Infrastructure\Persistence\MySqlStepRepositoryTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\Criteria\CriteriaMother" class="CodelyTv\Tests\Shared\Domain\Criteria\CriteriaMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\Criteria\FilterFieldMother" class="CodelyTv\Tests\Shared\Domain\Criteria\FilterFieldMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\Criteria\FilterMother" class="CodelyTv\Tests\Shared\Domain\Criteria\FilterMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\Criteria\FilterValueMother" class="CodelyTv\Tests\Shared\Domain\Criteria\FilterValueMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\Criteria\FiltersMother" class="CodelyTv\Tests\Shared\Domain\Criteria\FiltersMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\Criteria\OrderByMother" class="CodelyTv\Tests\Shared\Domain\Criteria\OrderByMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\Criteria\OrderMother" class="CodelyTv\Tests\Shared\Domain\Criteria\OrderMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\DuplicatorMother" class="CodelyTv\Tests\Shared\Domain\DuplicatorMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\IntegerMother" class="CodelyTv\Tests\Shared\Domain\IntegerMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\MotherCreator" class="CodelyTv\Tests\Shared\Domain\MotherCreator" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\RandomElementPicker" class="CodelyTv\Tests\Shared\Domain\RandomElementPicker" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\Repeater" class="CodelyTv\Tests\Shared\Domain\Repeater" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\TestUtils" class="CodelyTv\Tests\Shared\Domain\TestUtils" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\UuidMother" class="CodelyTv\Tests\Shared\Domain\UuidMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Domain\WordMother" class="CodelyTv\Tests\Shared\Domain\WordMother" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\ArchitectureTest" class="CodelyTv\Tests\Shared\Infrastructure\ArchitectureTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Behat\ApiContext" class="CodelyTv\Tests\Shared\Infrastructure\Behat\ApiContext" public="true" autowire="true" autoconfigure="true">
      <argument type="service" id="behat.mink.default_session"/>
    </service>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Behat\ApplicationFeatureContext" class="CodelyTv\Tests\Shared\Infrastructure\Behat\ApplicationFeatureContext" public="true" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Doctrine\DatabaseConnections"/>
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Bus\Event\InMemory\InMemorySymfonyEventBus"/>
      <argument type="service" id="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventJsonDeserializer"/>
    </service>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Bus\Command\FakeCommand" class="CodelyTv\Tests\Shared\Infrastructure\Bus\Command\FakeCommand" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBusTest" class="CodelyTv\Tests\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBusTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineEventBusTest" class="CodelyTv\Tests\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineEventBusTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBusTest" class="CodelyTv\Tests\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBusTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Bus\Event\RabbitMq\TestAllWorksOnRabbitMqEventsPublished" class="CodelyTv\Tests\Shared\Infrastructure\Bus\Event\RabbitMq\TestAllWorksOnRabbitMqEventsPublished" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Bus\Query\FakeQuery" class="CodelyTv\Tests\Shared\Infrastructure\Bus\Query\FakeQuery" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Bus\Query\FakeResponse" class="CodelyTv\Tests\Shared\Infrastructure\Bus\Query\FakeResponse" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Tests\Shared\Infrastructure\Bus\Query\FakeResponse&quot;: argument &quot;$number&quot; of method &quot;__construct()&quot; is type-hinted &quot;int&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBusTest" class="CodelyTv\Tests\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBusTest" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\ConstantRandomNumberGenerator" class="CodelyTv\Tests\Shared\Infrastructure\ConstantRandomNumberGenerator" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Doctrine\MySqlDatabaseCleaner" class="CodelyTv\Tests\Shared\Infrastructure\Doctrine\MySqlDatabaseCleaner" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Elastic\ElasticDatabaseCleaner" class="CodelyTv\Tests\Shared\Infrastructure\Elastic\ElasticDatabaseCleaner" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Mink\MinkHelper" class="CodelyTv\Tests\Shared\Infrastructure\Mink\MinkHelper" autowire="true" autoconfigure="true">
      <argument type="service" id="behat.mink.default_session"/>
    </service>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Mink\MinkSessionRequestHelper" class="CodelyTv\Tests\Shared\Infrastructure\Mink\MinkSessionRequestHelper" autowire="true" autoconfigure="true">
      <argument type="service" id="CodelyTv\Tests\Shared\Infrastructure\Mink\MinkHelper"/>
    </service>
    <service id="CodelyTv\Tests\Shared\Infrastructure\Mockery\CodelyTvMatcherIsSimilar" class="CodelyTv\Tests\Shared\Infrastructure\Mockery\CodelyTvMatcherIsSimilar" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Tests\Shared\Infrastructure\Mockery\CodelyTvMatcherIsSimilar&quot;: argument &quot;$value&quot; of method &quot;__construct()&quot; is type-hinted &quot;mixed&quot;, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\AggregateRootArraySimilarComparator" class="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\AggregateRootArraySimilarComparator" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\AggregateRootSimilarComparator" class="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\AggregateRootSimilarComparator" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DateTimeSimilarComparator" class="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DateTimeSimilarComparator" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DateTimeStringSimilarComparator" class="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DateTimeStringSimilarComparator" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DomainEventArraySimilarComparator" class="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DomainEventArraySimilarComparator" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DomainEventSimilarComparator" class="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DomainEventSimilarComparator" autowire="true" autoconfigure="true"/>
    <service id="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Constraint\CodelyTvConstraintIsSimilar" class="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Constraint\CodelyTvConstraintIsSimilar" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Constraint\CodelyTvConstraintIsSimilar&quot;: argument &quot;$value&quot; of method &quot;__construct()&quot; has no type-hint, you should configure its value explicitly."/>
    </service>
    <service id="CodelyTv\Tests\Shared\SharedArchitectureTest" class="CodelyTv\Tests\Shared\SharedArchitectureTest" autowire="true" autoconfigure="true"/>
    <service id="controller_resolver" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <call method="allowControllers">
        <argument type="collection">
          <argument>Symfony\Bundle\FrameworkBundle\Controller\AbstractController</argument>
          <argument>Symfony\Bundle\FrameworkBundle\Controller\TemplateController</argument>
        </argument>
      </call>
      <call method="allowControllers">
        <argument type="collection">
          <argument>CodelyTv\Apps\Backoffice\Backend\BackofficeBackendKernel</argument>
          <argument>CodelyTv\Apps\Backoffice\Backend\Controller\Courses\CoursesGetController</argument>
          <argument>CodelyTv\Apps\Backoffice\Backend\Controller\HealthCheck\HealthCheckGetController</argument>
          <argument>CodelyTv\Apps\Backoffice\Backend\Controller\Metrics\MetricsController</argument>
        </argument>
      </call>
    </service>
    <service id="argument_metadata_factory" class="Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory"/>
    <service id="argument_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver">
      <argument type="service" id="argument_metadata_factory"/>
      <argument type="iterator">
        <argument type="service" id="argument_resolver.backed_enum_resolver"/>
        <argument type="service" id="argument_resolver.datetime"/>
        <argument type="service" id="argument_resolver.request_attribute"/>
        <argument type="service" id="argument_resolver.request"/>
        <argument type="service" id="argument_resolver.session"/>
        <argument type="service" id="argument_resolver.service"/>
        <argument type="service" id="argument_resolver.default"/>
        <argument type="service" id="argument_resolver.variadic"/>
      </argument>
      <argument type="service" id=".service_locator.5vJX4PW"/>
    </service>
    <service id="argument_resolver.backed_enum_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.datetime" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver">controller.argument_value_resolver</tag>
      <argument type="service" id="clock" on-invalid="null"/>
    </service>
    <service id="argument_resolver.request_payload" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver" lazy="true">
      <tag name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver">controller.targeted_value_resolver</tag>
      <tag name="container.error" message="You can neither use &quot;#[MapRequestPayload]&quot; nor &quot;#[MapQueryString]&quot; since the Serializer component is not installed. Try running &quot;composer require symfony/serializer-pack&quot;."/>
    </service>
    <service id="argument_resolver.request_attribute" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.request" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver">
      <tag priority="50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.session" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver">
      <tag priority="50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.service" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver">
      <tag priority="-50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver">controller.argument_value_resolver</tag>
      <argument type="service" id=".service_locator.Sr6W89v"/>
    </service>
    <service id="argument_resolver.default" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver">
      <tag priority="-100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.variadic" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver">
      <tag priority="-150" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.query_parameter_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver">
      <tag name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver">controller.targeted_value_resolver</tag>
    </service>
    <service id="response_listener" class="Symfony\Component\HttpKernel\EventListener\ResponseListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument>UTF-8</argument>
      <argument>false</argument>
    </service>
    <service id="locale_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="request_stack"/>
      <argument>en</argument>
      <argument type="service" id="router.default" on-invalid="ignore"/>
      <argument>false</argument>
      <argument type="collection"/>
    </service>
    <service id="validate_request_listener" class="Symfony\Component\HttpKernel\EventListener\ValidateRequestListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="disallow_search_engine_index_response_listener" class="Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="error_controller" class="Symfony\Component\HttpKernel\Controller\ErrorController" public="true">
      <argument type="service" id="http_kernel"/>
      <argument>error_controller</argument>
      <argument type="service" id="error_handler.error_renderer.html"/>
    </service>
    <service id="exception_listener" class="Symfony\Component\HttpKernel\EventListener\ErrorListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument>error_controller</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>true</argument>
      <argument type="collection"/>
    </service>
    <service id="controller.cache_attribute_listener" class="Symfony\Component\HttpKernel\EventListener\CacheAttributeListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="parameter_bag" class="Symfony\Component\DependencyInjection\ParameterBag\ContainerBag">
      <argument type="service" id="service_container"/>
    </service>
    <service id="event_dispatcher" class="Symfony\Component\EventDispatcher\EventDispatcher" public="true">
      <tag name="container.hot_path"/>
      <tag name="event_dispatcher">event_dispatcher.dispatcher</tag>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="CodelyTv\Shared\Infrastructure\Symfony\AddJsonBodyToRequestListener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="CodelyTv\Shared\Infrastructure\Symfony\ApiExceptionListener"/>
          <argument>onException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="CodelyTv\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>setDefaultLocale</argument>
        </argument>
        <argument>100</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>16</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="validate_request_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="disallow_search_engine_index_response_listener"/>
          <argument>onResponse</argument>
        </argument>
        <argument>-255</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>onControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>logKernelException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>removeCspHeader</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="controller.cache_attribute_listener"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>10</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="controller.cache_attribute_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-10</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.suggest_missing_package_subscriber"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="test.session.listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="test.session.listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1000</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>32</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-64</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerMessageFailedEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.retry.send_failed_message_for_retry_listener"/>
          <argument>onMessageFailed</argument>
        </argument>
        <argument>100</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerMessageFailedEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.failure.add_error_details_stamp_listener"/>
          <argument>onMessageFailed</argument>
        </argument>
        <argument>200</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerStartedEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.listener.stop_worker_on_restart_signal_listener"/>
          <argument>onWorkerStarted</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerRunningEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.listener.stop_worker_on_restart_signal_listener"/>
          <argument>onWorkerRunning</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerMessageFailedEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.listener.stop_worker_on_stop_exception_listener"/>
          <argument>onMessageFailed</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerRunningEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.listener.stop_worker_on_stop_exception_listener"/>
          <argument>onWorkerRunning</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id="http_kernel" class="Symfony\Component\HttpKernel\HttpKernel" public="true">
      <tag name="container.hot_path"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\Runner\Symfony\HttpKernelRunner"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\Runner\Symfony\ResponseRunner"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\SymfonyRuntime"/>
      <argument type="service" id="event_dispatcher"/>
      <argument type="service" id="controller_resolver"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="argument_resolver"/>
      <argument>true</argument>
    </service>
    <service id="request_stack" class="Symfony\Component\HttpFoundation\RequestStack" public="true"/>
    <service id="http_cache" class="Symfony\Bundle\FrameworkBundle\HttpCache\HttpCache">
      <tag name="container.hot_path"/>
      <argument type="service" id="kernel"/>
      <argument type="service" id="http_cache.store"/>
      <argument>null</argument>
      <argument type="collection">
        <argument key="debug">true</argument>
      </argument>
    </service>
    <service id="http_cache.store" class="Symfony\Component\HttpKernel\HttpCache\Store">
      <argument>/app/apps/backoffice/backend/var/cache/test/http_cache</argument>
    </service>
    <service id="url_helper" class="Symfony\Component\HttpFoundation\UrlHelper">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="cache_warmer" class="Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate" public="true">
      <tag name="container.no_preload"/>
      <argument type="tagged_iterator" tag="kernel.cache_warmer"/>
      <argument>true</argument>
      <argument>/app/apps/backoffice/backend/var/cache/test/CodelyTv_Apps_Backoffice_Backend_BackofficeBackendKernelTestDebugContainerDeprecations.log</argument>
    </service>
    <service id="cache_clearer" class="Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer">
      <argument type="tagged_iterator" tag="kernel.cache_clearer"/>
    </service>
    <service id="filesystem" class="Symfony\Component\Filesystem\Filesystem"/>
    <service id="file_locator" class="Symfony\Component\HttpKernel\Config\FileLocator">
      <argument type="service" id="kernel"/>
    </service>
    <service id="uri_signer" class="Symfony\Component\HttpFoundation\UriSigner">
      <argument>%env(APP_SECRET)%</argument>
    </service>
    <service id="config_cache_factory" class="Symfony\Component\Config\ResourceCheckerConfigCacheFactory">
      <argument type="tagged_iterator" tag="config_cache.resource_checker"/>
    </service>
    <service id="dependency_injection.config.container_parameters_resource_checker" class="Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker">
      <tag name="config_cache.resource_checker" priority="-980"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="config.resource.self_checking_resource_checker" class="Symfony\Component\Config\Resource\SelfCheckingResourceChecker">
      <tag name="config_cache.resource_checker" priority="-990"/>
    </service>
    <service id="services_resetter" class="Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter" public="true">
      <argument type="iterator">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="cache.messenger.restart_workers_signal" type="service" id="cache.messenger.restart_workers_signal" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator_expression_language" type="service" id="cache.validator_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.transport.in_memory.factory" type="service" id="messenger.transport.in_memory.factory" on-invalid="ignore_uninitialized"/>
      </argument>
      <argument type="collection">
        <argument key="cache.app" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.system" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.validator" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.serializer" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.property_info" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.messenger.restart_workers_signal" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.validator_expression_language" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="messenger.transport.in_memory.factory" type="collection">
          <argument>reset</argument>
        </argument>
      </argument>
    </service>
    <service id="reverse_container" class="Symfony\Component\DependencyInjection\ReverseContainer">
      <argument type="service" id="service_container"/>
      <argument type="service" id=".service_locator.NLcq8cs"/>
    </service>
    <service id="container.env_var_processor" class="Symfony\Component\DependencyInjection\EnvVarProcessor">
      <tag name="container.env_var_processor"/>
      <argument type="service" id="service_container"/>
      <argument type="tagged_iterator" tag="container.env_var_loader"/>
    </service>
    <service id="slugger" class="Symfony\Component\String\Slugger\SluggerInterface">
      <tag name="container.error" message="You cannot use the &quot;slugger&quot; service since the Translation contracts are not installed. Try running &quot;composer require symfony/translation&quot;."/>
    </service>
    <service id="container.getenv" class="Closure">
      <tag name="routing.expression_language_function" function="env"/>
      <argument type="collection">
        <argument type="service" id="service_container"/>
        <argument>getEnv</argument>
      </argument>
      <factory class="Closure" method="fromCallable"/>
    </service>
    <service id="container.get_routing_condition_service" class="Closure" public="true">
      <tag name="routing.expression_language_function" function="service"/>
      <argument type="collection">
        <argument type="service" id="messenger.retry_strategy_locator"/>
        <argument>get</argument>
      </argument>
      <factory class="Closure" method="fromCallable"/>
    </service>
    <service id="container.env" class="Symfony\Component\String\LazyString" constructor="fromCallable" abstract="true">
      <argument type="service" id="container.getenv"/>
    </service>
    <service id="config_builder.warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\ConfigBuilderCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="kernel"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="clock" class="Symfony\Component\Clock\Clock"/>
    <service id="Symfony\Component\Config\Loader\LoaderInterface" class="Symfony\Component\Config\Loader\LoaderInterface" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Request" class="Symfony\Component\HttpFoundation\Request" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Response" class="Symfony\Component\HttpFoundation\Response" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Session\SessionInterface" class="Symfony\Component\HttpFoundation\Session\SessionInterface" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="fragment.handler" class="Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler">
      <argument type="service" id=".service_locator.va_rxC4"/>
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
    </service>
    <service id="fragment.uri_generator" class="Symfony\Component\HttpKernel\Fragment\FragmentUriGenerator">
      <argument>/_fragment</argument>
      <argument type="service" id="uri_signer"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="fragment.renderer.inline" class="Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer">
      <tag name="kernel.fragment_renderer" alias="inline"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="error_handler.error_renderer.html" class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer">
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <argument>true</argument>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="isDebug"/>
        </service>
      </argument>
      <argument>UTF-8</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <argument>/app/apps/backoffice/backend</argument>
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="getAndCleanOutputBuffer"/>
        </service>
      </argument>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="console.error_listener" class="Symfony\Component\Console\EventListener\ErrorListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="console"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="console.suggest_missing_package_subscriber" class="Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.no_preload"/>
    </service>
    <service id="console.command.about" class="Symfony\Bundle\FrameworkBundle\Command\AboutCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>about</argument>
      </call>
      <call method="setDescription">
        <argument>Display information about the current project</argument>
      </call>
    </service>
    <service id="console.command.assets_install" class="Symfony\Bundle\FrameworkBundle\Command\AssetsInstallCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="filesystem"/>
      <argument>/app/apps/backoffice/backend</argument>
      <call method="setName">
        <argument>assets:install</argument>
      </call>
      <call method="setDescription">
        <argument>Install bundle's web assets under a public directory</argument>
      </call>
    </service>
    <service id="console.command.cache_clear" class="Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache_clearer"/>
      <argument type="service" id="filesystem"/>
      <call method="setName">
        <argument>cache:clear</argument>
      </call>
      <call method="setDescription">
        <argument>Clear the cache</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_clear" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache.global_clearer"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.property_info</argument>
        <argument>cache.messenger.restart_workers_signal</argument>
        <argument>cache.validator_expression_language</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:clear</argument>
      </call>
      <call method="setDescription">
        <argument>Clear cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_prune" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="collection"/>
      <call method="setName">
        <argument>cache:pool:prune</argument>
      </call>
      <call method="setDescription">
        <argument>Prune cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_invalidate_tags" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolInvalidateTagsCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.jkL9kAz"/>
      <call method="setName">
        <argument>cache:pool:invalidate-tags</argument>
      </call>
      <call method="setDescription">
        <argument>Invalidate cache tags for all or a specific pool</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_delete" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache.global_clearer"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.property_info</argument>
        <argument>cache.messenger.restart_workers_signal</argument>
        <argument>cache.validator_expression_language</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:delete</argument>
      </call>
      <call method="setDescription">
        <argument>Delete an item from a cache pool</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_list" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolListCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.property_info</argument>
        <argument>cache.messenger.restart_workers_signal</argument>
        <argument>cache.validator_expression_language</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:list</argument>
      </call>
      <call method="setDescription">
        <argument>List available cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_warmup" class="Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache_warmer"/>
      <call method="setName">
        <argument>cache:warmup</argument>
      </call>
      <call method="setDescription">
        <argument>Warm up an empty cache</argument>
      </call>
    </service>
    <service id="console.command.config_debug" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>debug:config</argument>
      </call>
      <call method="setDescription">
        <argument>Dump the current configuration for an extension</argument>
      </call>
    </service>
    <service id="console.command.config_dump_reference" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>config:dump-reference</argument>
      </call>
      <call method="setDescription">
        <argument>Dump the default configuration for an extension</argument>
      </call>
    </service>
    <service id="console.command.container_debug" class="Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>debug:container</argument>
      </call>
      <call method="setDescription">
        <argument>Display current services for an application</argument>
      </call>
    </service>
    <service id="console.command.container_lint" class="Symfony\Bundle\FrameworkBundle\Command\ContainerLintCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>lint:container</argument>
      </call>
      <call method="setDescription">
        <argument>Ensure that arguments injected into services match type declarations</argument>
      </call>
    </service>
    <service id="console.command.debug_autowiring" class="Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument>null</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:autowiring</argument>
      </call>
      <call method="setDescription">
        <argument>List classes/interfaces you can use for autowiring</argument>
      </call>
    </service>
    <service id="console.command.dotenv_debug" class="Symfony\Component\Dotenv\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument>test</argument>
      <argument>/app/apps/backoffice/backend</argument>
      <call method="setName">
        <argument>debug:dotenv</argument>
      </call>
      <call method="setDescription">
        <argument>List all dotenv files with variables and values</argument>
      </call>
    </service>
    <service id="console.command.event_dispatcher_debug" class="Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.h7gfyOW"/>
      <call method="setName">
        <argument>debug:event-dispatcher</argument>
      </call>
      <call method="setDescription">
        <argument>Display configured listeners for an application</argument>
      </call>
    </service>
    <service id="console.command.messenger_consume_messages" class="Symfony\Component\Messenger\Command\ConsumeMessagesCommand">
      <tag name="console.command"/>
      <tag name="monolog.logger" channel="messenger"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="messenger.routable_message_bus"/>
      <argument type="service" id="messenger.receiver_locator"/>
      <argument type="service" id="event_dispatcher"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="collection"/>
      <argument type="service" id="messenger.listener.reset_services" on-invalid="null"/>
      <argument type="collection">
        <argument>messenger.bus.default</argument>
      </argument>
      <argument>null</argument>
      <argument>null</argument>
      <call method="setName">
        <argument>messenger:consume</argument>
      </call>
      <call method="setDescription">
        <argument>Consume messages</argument>
      </call>
    </service>
    <service id="console.command.messenger_setup_transports" class="Symfony\Component\Messenger\Command\SetupTransportsCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="messenger.receiver_locator"/>
      <argument type="collection"/>
      <call method="setName">
        <argument>messenger:setup-transports</argument>
      </call>
      <call method="setDescription">
        <argument>Prepare the required infrastructure for the transport</argument>
      </call>
    </service>
    <service id="console.command.messenger_debug" class="Symfony\Component\Messenger\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="collection">
        <argument key="messenger.bus.default" type="collection">
          <argument key="Symfony\Component\Console\Messenger\RunCommandMessage" type="collection">
            <argument type="collection">
              <argument>console.messenger.execute_command_handler</argument>
              <argument type="collection"/>
            </argument>
          </argument>
          <argument key="Symfony\Component\Messenger\Message\RedispatchMessage" type="collection">
            <argument type="collection">
              <argument>messenger.redispatch_message_handler</argument>
              <argument type="collection"/>
            </argument>
          </argument>
        </argument>
      </argument>
      <call method="setName">
        <argument>debug:messenger</argument>
      </call>
      <call method="setDescription">
        <argument>List messages you can dispatch using the message buses</argument>
      </call>
    </service>
    <service id="console.command.messenger_stop_workers" class="Symfony\Component\Messenger\Command\StopWorkersCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache.messenger.restart_workers_signal"/>
      <call method="setName">
        <argument>messenger:stop-workers</argument>
      </call>
      <call method="setDescription">
        <argument>Stop workers after their current message</argument>
      </call>
    </service>
    <service id="console.command.messenger_stats" class="Symfony\Component\Messenger\Command\StatsCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="messenger.receiver_locator"/>
      <argument type="collection"/>
      <call method="setName">
        <argument>messenger:stats</argument>
      </call>
      <call method="setDescription">
        <argument>Show the message count for one or more transports</argument>
      </call>
    </service>
    <service id="console.command.router_debug" class="Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:router</argument>
      </call>
      <call method="setDescription">
        <argument>Display current routes for an application</argument>
      </call>
    </service>
    <service id="console.command.router_match" class="Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="router.default"/>
      <argument type="tagged_iterator" tag="routing.expression_language_provider"/>
      <call method="setName">
        <argument>router:match</argument>
      </call>
      <call method="setDescription">
        <argument>Help debug routes by simulating a path info match</argument>
      </call>
    </service>
    <service id="console.command.validator_debug" class="Symfony\Component\Validator\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="validator"/>
      <call method="setName">
        <argument>debug:validator</argument>
      </call>
      <call method="setDescription">
        <argument>Display validation constraints for classes</argument>
      </call>
    </service>
    <service id="console.command.xliff_lint" class="Symfony\Component\Translation\Command\XliffLintCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>lint:xliff</argument>
      </call>
      <call method="setDescription">
        <argument>Lint an XLIFF file and outputs encountered errors</argument>
      </call>
    </service>
    <service id="console.command.yaml_lint" class="Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>lint:yaml</argument>
      </call>
      <call method="setDescription">
        <argument>Lint a YAML file and outputs encountered errors</argument>
      </call>
    </service>
    <service id="console.command.secrets_set" class="Symfony\Bundle\FrameworkBundle\Command\SecretsSetCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="null"/>
      <call method="setName">
        <argument>secrets:set</argument>
      </call>
      <call method="setDescription">
        <argument>Set a secret in the vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_remove" class="Symfony\Bundle\FrameworkBundle\Command\SecretsRemoveCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="null"/>
      <call method="setName">
        <argument>secrets:remove</argument>
      </call>
      <call method="setDescription">
        <argument>Remove a secret from the vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_generate_key" class="Symfony\Bundle\FrameworkBundle\Command\SecretsGenerateKeysCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:generate-keys</argument>
      </call>
      <call method="setDescription">
        <argument>Generate new encryption keys</argument>
      </call>
    </service>
    <service id="console.command.secrets_list" class="Symfony\Bundle\FrameworkBundle\Command\SecretsListCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:list</argument>
      </call>
      <call method="setDescription">
        <argument>List all secrets</argument>
      </call>
    </service>
    <service id="console.command.secrets_reveal" class="Symfony\Bundle\FrameworkBundle\Command\SecretsRevealCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:reveal</argument>
      </call>
      <call method="setDescription">
        <argument>Reveal the value of a secret</argument>
      </call>
    </service>
    <service id="console.command.secrets_decrypt_to_local" class="Symfony\Bundle\FrameworkBundle\Command\SecretsDecryptToLocalCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:decrypt-to-local</argument>
      </call>
      <call method="setDescription">
        <argument>Decrypt all secrets and stores them in the local vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_encrypt_from_local" class="Symfony\Bundle\FrameworkBundle\Command\SecretsEncryptFromLocalCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:encrypt-from-local</argument>
      </call>
      <call method="setDescription">
        <argument>Encrypt all local secrets to the vault</argument>
      </call>
    </service>
    <service id="console.messenger.application" class="Symfony\Bundle\FrameworkBundle\Console\Application" shared="false">
      <argument type="service" id="kernel"/>
      <call method="setAutoExit">
        <argument>false</argument>
      </call>
    </service>
    <service id="console.messenger.execute_command_handler" class="Symfony\Component\Console\Messenger\RunCommandMessageHandler">
      <tag name="messenger.message_handler"/>
      <argument type="service" id="console.messenger.application"/>
    </service>
    <service id="cache.app" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>Y84thSA2LO</argument>
      <argument>0</argument>
      <argument>/app/apps/backoffice/backend/var/cache/test/pools/app</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.app.taggable" class="Symfony\Component\Cache\Adapter\TagAwareAdapter">
      <tag name="cache.taggable" pool="cache.app"/>
      <argument type="service" id="cache.app"/>
    </service>
    <service id="cache.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>TX-c7SuAuP</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/app/apps/backoffice/backend/var/cache/test/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.validator" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>9MESXEJvGZ</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/app/apps/backoffice/backend/var/cache/test/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.serializer" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>ifYmw8Hm+1</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/app/apps/backoffice/backend/var/cache/test/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.property_info" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>ydWhloTiXv</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/app/apps/backoffice/backend/var/cache/test/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.messenger.restart_workers_signal" class="Symfony\Component\Cache\Adapter\FilesystemAdapter">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>o73l9IrhYh</argument>
      <argument>0</argument>
      <argument>/app/apps/backoffice/backend/var/cache/test/pools/app</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" abstract="true">
      <tag name="cache.pool" clearer="cache.system_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/app/apps/backoffice/backend/var/cache/test/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.apcu" class="Symfony\Component\Cache\Adapter\ApcuAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.filesystem" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>/app/apps/backoffice/backend/var/cache/test/pools/app</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.psr6" class="Symfony\Component\Cache\Adapter\ProxyAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_psr6_provider" clearer="cache.default_clearer" reset="reset"/>
      <argument type="abstract">PSR-6 provider service</argument>
      <argument></argument>
      <argument>0</argument>
    </service>
    <service id="cache.adapter.redis" class="Symfony\Component\Cache\Adapter\RedisAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Redis connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.redis_tag_aware" class="Symfony\Component\Cache\Adapter\RedisTagAwareAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Redis connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.memcached" class="Symfony\Component\Cache\Adapter\MemcachedAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_memcached_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Memcached connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.doctrine_dbal" class="Symfony\Component\Cache\Adapter\DoctrineDbalAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_doctrine_dbal_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">DBAL connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="collection"/>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.pdo" class="Symfony\Component\Cache\Adapter\PdoAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_pdo_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">PDO connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="collection"/>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.array" class="Symfony\Component\Cache\Adapter\ArrayAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.default_marshaller" class="Symfony\Component\Cache\Marshaller\DefaultMarshaller">
      <argument>null</argument>
      <argument>true</argument>
    </service>
    <service id="cache.default_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.messenger.restart_workers_signal" type="service" id="cache.messenger.restart_workers_signal" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.system_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <tag name="kernel.cache_clearer"/>
      <argument type="collection">
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator_expression_language" type="service" id="cache.validator_expression_language" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.global_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="cache.messenger.restart_workers_signal" type="service" id="cache.messenger.restart_workers_signal" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator_expression_language" type="service" id="cache.validator_expression_language" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="translator" class="Symfony\Component\Translation\IdentityTranslator"/>
    <service id="identity_translator" class="Symfony\Component\Translation\IdentityTranslator"/>
    <service id="test.client" class="Symfony\Bundle\FrameworkBundle\KernelBrowser" shared="false" public="true">
      <argument type="service" id="kernel"/>
      <argument type="collection"/>
      <argument type="service" id="test.client.history"/>
      <argument type="service" id="test.client.cookiejar"/>
    </service>
    <service id="test.client.history" class="Symfony\Component\BrowserKit\History" shared="false"/>
    <service id="test.client.cookiejar" class="Symfony\Component\BrowserKit\CookieJar" shared="false"/>
    <service id="test.session.listener" class="Symfony\Component\HttpKernel\EventListener\SessionListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id=".service_locator.9ba7RnD"/>
      <argument>true</argument>
      <argument>%session.storage.options%</argument>
    </service>
    <service id="test.service_container" class="Symfony\Bundle\FrameworkBundle\Test\TestContainer" public="true">
      <argument type="service" id="kernel"/>
      <argument>test.private_services_locator</argument>
    </service>
    <service id="test.private_services_locator" class="Symfony\Component\DependencyInjection\ServiceLocator" public="true">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="CodelyTv\Shared\Domain\Assert" type="service_closure" id="CodelyTv\Shared\Domain\Assert" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Domain\SecondsInterval" type="service_closure" id="CodelyTv\Shared\Domain\SecondsInterval" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Domain\Utils" type="service_closure" id="CodelyTv\Shared\Domain\Utils" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\CallableFirstParameterExtractor" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\CallableFirstParameterExtractor" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Command\CommandNotRegisteredError" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Command\CommandNotRegisteredError" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBus" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBus" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventJsonDeserializer" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventJsonDeserializer" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventJsonSerializer" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventJsonSerializer" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventMapping" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventMapping" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventSubscriberLocator" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Event\DomainEventSubscriberLocator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Event\InMemory\InMemorySymfonyEventBus" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Event\InMemory\InMemorySymfonyEventBus" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineDomainEventsConsumer" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineDomainEventsConsumer" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineEventBus" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineEventBus" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConfigurer" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConfigurer" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConnection" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConnection" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBus" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBus" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqExchangeNameFormatter" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqExchangeNameFormatter" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqQueueNameFormatter" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqQueueNameFormatter" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Event\WithMonitoring\WithPrometheusMonitoringEventBus" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Event\WithMonitoring\WithPrometheusMonitoringEventBus" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBus" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBus" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Doctrine\DatabaseConnections" type="service_closure" id="CodelyTv\Shared\Infrastructure\Doctrine\DatabaseConnections" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Doctrine\Dbal\DbalCustomTypesRegistrar" type="service_closure" id="CodelyTv\Shared\Infrastructure\Doctrine\Dbal\DbalCustomTypesRegistrar" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Doctrine\DoctrineEntityManagerFactory" type="service_closure" id="CodelyTv\Shared\Infrastructure\Doctrine\DoctrineEntityManagerFactory" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Elasticsearch\ElasticsearchClientFactory" type="service_closure" id="CodelyTv\Shared\Infrastructure\Elasticsearch\ElasticsearchClientFactory" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Monitoring\PrometheusMonitor" type="service_closure" id="CodelyTv\Shared\Infrastructure\Monitoring\PrometheusMonitor" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Persistence\Doctrine\DoctrineCriteriaConverter" type="service_closure" id="CodelyTv\Shared\Infrastructure\Persistence\Doctrine\DoctrineCriteriaConverter" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Persistence\Elasticsearch\ElasticQueryGenerator" type="service_closure" id="CodelyTv\Shared\Infrastructure\Persistence\Elasticsearch\ElasticQueryGenerator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Persistence\Elasticsearch\ElasticsearchCriteriaConverter" type="service_closure" id="CodelyTv\Shared\Infrastructure\Persistence\Elasticsearch\ElasticsearchCriteriaConverter" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\PhpRandomNumberGenerator" type="service_closure" id="CodelyTv\Shared\Infrastructure\PhpRandomNumberGenerator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\RamseyUuidGenerator" type="service_closure" id="CodelyTv\Shared\Infrastructure\RamseyUuidGenerator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Symfony\AddJsonBodyToRequestListener" type="service_closure" id="CodelyTv\Shared\Infrastructure\Symfony\AddJsonBodyToRequestListener" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Symfony\ApiExceptionListener" type="service_closure" id="CodelyTv\Shared\Infrastructure\Symfony\ApiExceptionListener" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Symfony\ApiExceptionsHttpStatusCodeMapping" type="service_closure" id="CodelyTv\Shared\Infrastructure\Symfony\ApiExceptionsHttpStatusCodeMapping" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware" type="service_closure" id="CodelyTv\Shared\Infrastructure\Symfony\BasicHttpAuthMiddleware" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Infrastructure\Symfony\FlashSession" type="service_closure" id="CodelyTv\Shared\Infrastructure\Symfony\FlashSession" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandHandler" type="service_closure" id="CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandHandler" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Auth\Application\Authenticate\UserAuthenticator" type="service_closure" id="CodelyTv\Backoffice\Auth\Application\Authenticate\UserAuthenticator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Auth\Domain\AuthUser" type="service_closure" id="CodelyTv\Backoffice\Auth\Domain\AuthUser" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Auth\Domain\InvalidAuthCredentials" type="service_closure" id="CodelyTv\Backoffice\Auth\Domain\InvalidAuthCredentials" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Auth\Domain\InvalidAuthUsername" type="service_closure" id="CodelyTv\Backoffice\Auth\Domain\InvalidAuthUsername" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Auth\Infrastructure\Persistence\InMemoryAuthRepository" type="service_closure" id="CodelyTv\Backoffice\Auth\Infrastructure\Persistence\InMemoryAuthRepository" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Courses\Application\BackofficeCoursesResponse" type="service_closure" id="CodelyTv\Backoffice\Courses\Application\BackofficeCoursesResponse" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Courses\Application\Create\BackofficeCourseCreator" type="service_closure" id="CodelyTv\Backoffice\Courses\Application\Create\BackofficeCourseCreator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Courses\Application\Create\CreateBackofficeCourseOnCourseCreated" type="service_closure" id="CodelyTv\Backoffice\Courses\Application\Create\CreateBackofficeCourseOnCourseCreated" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Courses\Application\SearchAll\AllBackofficeCoursesSearcher" type="service_closure" id="CodelyTv\Backoffice\Courses\Application\SearchAll\AllBackofficeCoursesSearcher" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Courses\Application\SearchAll\SearchAllBackofficeCoursesQuery" type="service_closure" id="CodelyTv\Backoffice\Courses\Application\SearchAll\SearchAllBackofficeCoursesQuery" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Courses\Application\SearchAll\SearchAllBackofficeCoursesQueryHandler" type="service_closure" id="CodelyTv\Backoffice\Courses\Application\SearchAll\SearchAllBackofficeCoursesQueryHandler" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Courses\Application\SearchByCriteria\BackofficeCoursesByCriteriaSearcher" type="service_closure" id="CodelyTv\Backoffice\Courses\Application\SearchByCriteria\BackofficeCoursesByCriteriaSearcher" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Courses\Application\SearchByCriteria\SearchBackofficeCoursesByCriteriaQueryHandler" type="service_closure" id="CodelyTv\Backoffice\Courses\Application\SearchByCriteria\SearchBackofficeCoursesByCriteriaQueryHandler" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\ElasticsearchBackofficeCourseRepository" type="service_closure" id="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\ElasticsearchBackofficeCourseRepository" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\InMemoryCacheBackofficeCourseRepository" type="service_closure" id="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\InMemoryCacheBackofficeCourseRepository" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\MySqlBackofficeCourseRepository" type="service_closure" id="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\MySqlBackofficeCourseRepository" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandHandlerTest" type="service_closure" id="CodelyTv\Tests\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandHandlerTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandMother" type="service_closure" id="CodelyTv\Tests\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Backoffice\Auth\Domain\AuthPasswordMother" type="service_closure" id="CodelyTv\Tests\Backoffice\Auth\Domain\AuthPasswordMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Backoffice\Auth\Domain\AuthUserMother" type="service_closure" id="CodelyTv\Tests\Backoffice\Auth\Domain\AuthUserMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Backoffice\Auth\Domain\AuthUsernameMother" type="service_closure" id="CodelyTv\Tests\Backoffice\Auth\Domain\AuthUsernameMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Backoffice\Courses\Domain\BackofficeCourseCriteriaMother" type="service_closure" id="CodelyTv\Tests\Backoffice\Courses\Domain\BackofficeCourseCriteriaMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Backoffice\Courses\Domain\BackofficeCourseMother" type="service_closure" id="CodelyTv\Tests\Backoffice\Courses\Domain\BackofficeCourseMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Backoffice\Courses\Infrastructure\Persistence\ElasticsearchBackofficeCourseRepositoryTest" type="service_closure" id="CodelyTv\Tests\Backoffice\Courses\Infrastructure\Persistence\ElasticsearchBackofficeCourseRepositoryTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Backoffice\Courses\Infrastructure\Persistence\MySqlBackofficeCourseRepositoryTest" type="service_closure" id="CodelyTv\Tests\Backoffice\Courses\Infrastructure\Persistence\MySqlBackofficeCourseRepositoryTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Backoffice\Shared\Infraestructure\PhpUnit\BackofficeEnvironmentArranger" type="service_closure" id="CodelyTv\Tests\Backoffice\Shared\Infraestructure\PhpUnit\BackofficeEnvironmentArranger" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Courses\Application\Create\CreateCourseCommandHandlerTest" type="service_closure" id="CodelyTv\Tests\Mooc\Courses\Application\Create\CreateCourseCommandHandlerTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Courses\Application\Create\CreateCourseCommandMother" type="service_closure" id="CodelyTv\Tests\Mooc\Courses\Application\Create\CreateCourseCommandMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Courses\Application\Update\CourseRenamerTest" type="service_closure" id="CodelyTv\Tests\Mooc\Courses\Application\Update\CourseRenamerTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Courses\Domain\CourseCreatedDomainEventMother" type="service_closure" id="CodelyTv\Tests\Mooc\Courses\Domain\CourseCreatedDomainEventMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Courses\Domain\CourseDurationMother" type="service_closure" id="CodelyTv\Tests\Mooc\Courses\Domain\CourseDurationMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Courses\Domain\CourseIdMother" type="service_closure" id="CodelyTv\Tests\Mooc\Courses\Domain\CourseIdMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Courses\Domain\CourseMother" type="service_closure" id="CodelyTv\Tests\Mooc\Courses\Domain\CourseMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Courses\Domain\CourseNameMother" type="service_closure" id="CodelyTv\Tests\Mooc\Courses\Domain\CourseNameMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Courses\Infrastructure\Persistence\CourseRepositoryTest" type="service_closure" id="CodelyTv\Tests\Mooc\Courses\Infrastructure\Persistence\CourseRepositoryTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\CoursesCounter\Application\Find\CoursesCounterResponseMother" type="service_closure" id="CodelyTv\Tests\Mooc\CoursesCounter\Application\Find\CoursesCounterResponseMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\CoursesCounter\Application\Find\FindCoursesCounterQueryHandlerTest" type="service_closure" id="CodelyTv\Tests\Mooc\CoursesCounter\Application\Find\FindCoursesCounterQueryHandlerTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\CoursesCounter\Application\Increment\IncrementCoursesCounterOnCourseCreatedTest" type="service_closure" id="CodelyTv\Tests\Mooc\CoursesCounter\Application\Increment\IncrementCoursesCounterOnCourseCreatedTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterIdMother" type="service_closure" id="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterIdMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterIncrementedDomainEventMother" type="service_closure" id="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterIncrementedDomainEventMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterMother" type="service_closure" id="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterTotalMother" type="service_closure" id="CodelyTv\Tests\Mooc\CoursesCounter\Domain\CoursesCounterTotalMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\MoocArchitectureTest" type="service_closure" id="CodelyTv\Tests\Mooc\MoocArchitectureTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Shared\Infrastructure\PhpUnit\MoocEnvironmentArranger" type="service_closure" id="CodelyTv\Tests\Mooc\Shared\Infrastructure\PhpUnit\MoocEnvironmentArranger" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Steps\Domain\Exercise\ExerciseStepContentMother" type="service_closure" id="CodelyTv\Tests\Mooc\Steps\Domain\Exercise\ExerciseStepContentMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Steps\Domain\Exercise\ExerciseStepMother" type="service_closure" id="CodelyTv\Tests\Mooc\Steps\Domain\Exercise\ExerciseStepMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Steps\Domain\Quiz\QuizStepMother" type="service_closure" id="CodelyTv\Tests\Mooc\Steps\Domain\Quiz\QuizStepMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Steps\Domain\Quiz\QuizStepQuestionMother" type="service_closure" id="CodelyTv\Tests\Mooc\Steps\Domain\Quiz\QuizStepQuestionMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Steps\Domain\StepDurationMother" type="service_closure" id="CodelyTv\Tests\Mooc\Steps\Domain\StepDurationMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Steps\Domain\StepIdMother" type="service_closure" id="CodelyTv\Tests\Mooc\Steps\Domain\StepIdMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Steps\Domain\StepTitleMother" type="service_closure" id="CodelyTv\Tests\Mooc\Steps\Domain\StepTitleMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Steps\Domain\Video\VideoStepMother" type="service_closure" id="CodelyTv\Tests\Mooc\Steps\Domain\Video\VideoStepMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Steps\Domain\Video\VideoStepUrlMother" type="service_closure" id="CodelyTv\Tests\Mooc\Steps\Domain\Video\VideoStepUrlMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Mooc\Steps\Infrastructure\Persistence\MySqlStepRepositoryTest" type="service_closure" id="CodelyTv\Tests\Mooc\Steps\Infrastructure\Persistence\MySqlStepRepositoryTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\Criteria\CriteriaMother" type="service_closure" id="CodelyTv\Tests\Shared\Domain\Criteria\CriteriaMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\Criteria\FilterFieldMother" type="service_closure" id="CodelyTv\Tests\Shared\Domain\Criteria\FilterFieldMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\Criteria\FilterMother" type="service_closure" id="CodelyTv\Tests\Shared\Domain\Criteria\FilterMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\Criteria\FilterValueMother" type="service_closure" id="CodelyTv\Tests\Shared\Domain\Criteria\FilterValueMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\Criteria\FiltersMother" type="service_closure" id="CodelyTv\Tests\Shared\Domain\Criteria\FiltersMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\Criteria\OrderByMother" type="service_closure" id="CodelyTv\Tests\Shared\Domain\Criteria\OrderByMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\Criteria\OrderMother" type="service_closure" id="CodelyTv\Tests\Shared\Domain\Criteria\OrderMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\DuplicatorMother" type="service_closure" id="CodelyTv\Tests\Shared\Domain\DuplicatorMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\IntegerMother" type="service_closure" id="CodelyTv\Tests\Shared\Domain\IntegerMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\MotherCreator" type="service_closure" id="CodelyTv\Tests\Shared\Domain\MotherCreator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\RandomElementPicker" type="service_closure" id="CodelyTv\Tests\Shared\Domain\RandomElementPicker" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\Repeater" type="service_closure" id="CodelyTv\Tests\Shared\Domain\Repeater" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\TestUtils" type="service_closure" id="CodelyTv\Tests\Shared\Domain\TestUtils" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\UuidMother" type="service_closure" id="CodelyTv\Tests\Shared\Domain\UuidMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Domain\WordMother" type="service_closure" id="CodelyTv\Tests\Shared\Domain\WordMother" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\ArchitectureTest" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\ArchitectureTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\Bus\Command\FakeCommand" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\Bus\Command\FakeCommand" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBusTest" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBusTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineEventBusTest" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\Bus\Event\MySql\MySqlDoctrineEventBusTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBusTest" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBusTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\Bus\Event\RabbitMq\TestAllWorksOnRabbitMqEventsPublished" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\Bus\Event\RabbitMq\TestAllWorksOnRabbitMqEventsPublished" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\Bus\Query\FakeQuery" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\Bus\Query\FakeQuery" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBusTest" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBusTest" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\ConstantRandomNumberGenerator" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\ConstantRandomNumberGenerator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\Doctrine\MySqlDatabaseCleaner" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\Doctrine\MySqlDatabaseCleaner" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\Elastic\ElasticDatabaseCleaner" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\Elastic\ElasticDatabaseCleaner" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\Mink\MinkHelper" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\Mink\MinkHelper" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\Mink\MinkSessionRequestHelper" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\Mink\MinkSessionRequestHelper" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\AggregateRootArraySimilarComparator" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\AggregateRootArraySimilarComparator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\AggregateRootSimilarComparator" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\AggregateRootSimilarComparator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DateTimeSimilarComparator" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DateTimeSimilarComparator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DateTimeStringSimilarComparator" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DateTimeStringSimilarComparator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DomainEventArraySimilarComparator" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DomainEventArraySimilarComparator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DomainEventSimilarComparator" type="service_closure" id="CodelyTv\Tests\Shared\Infrastructure\PhpUnit\Comparator\DomainEventSimilarComparator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Tests\Shared\SharedArchitectureTest" type="service_closure" id="CodelyTv\Tests\Shared\SharedArchitectureTest" on-invalid="ignore_uninitialized"/>
        <argument key="controller_resolver" type="service_closure" id="controller_resolver" on-invalid="ignore_uninitialized"/>
        <argument key="argument_metadata_factory" type="service_closure" id="argument_metadata_factory" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver" type="service_closure" id="argument_resolver" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.backed_enum_resolver" type="service_closure" id="argument_resolver.backed_enum_resolver" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.datetime" type="service_closure" id="argument_resolver.datetime" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.request_attribute" type="service_closure" id="argument_resolver.request_attribute" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.request" type="service_closure" id="argument_resolver.request" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.session" type="service_closure" id="argument_resolver.session" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.service" type="service_closure" id="argument_resolver.service" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.default" type="service_closure" id="argument_resolver.default" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.variadic" type="service_closure" id="argument_resolver.variadic" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.query_parameter_value_resolver" type="service_closure" id="argument_resolver.query_parameter_value_resolver" on-invalid="ignore_uninitialized"/>
        <argument key="response_listener" type="service_closure" id="response_listener" on-invalid="ignore_uninitialized"/>
        <argument key="locale_listener" type="service_closure" id="locale_listener" on-invalid="ignore_uninitialized"/>
        <argument key="validate_request_listener" type="service_closure" id="validate_request_listener" on-invalid="ignore_uninitialized"/>
        <argument key="disallow_search_engine_index_response_listener" type="service_closure" id="disallow_search_engine_index_response_listener" on-invalid="ignore_uninitialized"/>
        <argument key="exception_listener" type="service_closure" id="exception_listener" on-invalid="ignore_uninitialized"/>
        <argument key="controller.cache_attribute_listener" type="service_closure" id="controller.cache_attribute_listener" on-invalid="ignore_uninitialized"/>
        <argument key="parameter_bag" type="service_closure" id="parameter_bag" on-invalid="ignore_uninitialized"/>
        <argument key="http_cache" type="service_closure" id="http_cache" on-invalid="ignore_uninitialized"/>
        <argument key="http_cache.store" type="service_closure" id="http_cache.store" on-invalid="ignore_uninitialized"/>
        <argument key="url_helper" type="service_closure" id="url_helper" on-invalid="ignore_uninitialized"/>
        <argument key="cache_clearer" type="service_closure" id="cache_clearer" on-invalid="ignore_uninitialized"/>
        <argument key="filesystem" type="service_closure" id="filesystem" on-invalid="ignore_uninitialized"/>
        <argument key="file_locator" type="service_closure" id="file_locator" on-invalid="ignore_uninitialized"/>
        <argument key="uri_signer" type="service_closure" id="uri_signer" on-invalid="ignore_uninitialized"/>
        <argument key="config_cache_factory" type="service_closure" id="config_cache_factory" on-invalid="ignore_uninitialized"/>
        <argument key="dependency_injection.config.container_parameters_resource_checker" type="service_closure" id="dependency_injection.config.container_parameters_resource_checker" on-invalid="ignore_uninitialized"/>
        <argument key="config.resource.self_checking_resource_checker" type="service_closure" id="config.resource.self_checking_resource_checker" on-invalid="ignore_uninitialized"/>
        <argument key="reverse_container" type="service_closure" id="reverse_container" on-invalid="ignore_uninitialized"/>
        <argument key="container.env_var_processor" type="service_closure" id="container.env_var_processor" on-invalid="ignore_uninitialized"/>
        <argument key="container.getenv" type="service_closure" id="container.getenv" on-invalid="ignore_uninitialized"/>
        <argument key="config_builder.warmer" type="service_closure" id="config_builder.warmer" on-invalid="ignore_uninitialized"/>
        <argument key="clock" type="service_closure" id="clock" on-invalid="ignore_uninitialized"/>
        <argument key="fragment.handler" type="service_closure" id="fragment.handler" on-invalid="ignore_uninitialized"/>
        <argument key="fragment.uri_generator" type="service_closure" id="fragment.uri_generator" on-invalid="ignore_uninitialized"/>
        <argument key="fragment.renderer.inline" type="service_closure" id="fragment.renderer.inline" on-invalid="ignore_uninitialized"/>
        <argument key="error_handler.error_renderer.html" type="service_closure" id="error_handler.error_renderer.html" on-invalid="ignore_uninitialized"/>
        <argument key="console.error_listener" type="service_closure" id="console.error_listener" on-invalid="ignore_uninitialized"/>
        <argument key="console.suggest_missing_package_subscriber" type="service_closure" id="console.suggest_missing_package_subscriber" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.about" type="service_closure" id="console.command.about" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.assets_install" type="service_closure" id="console.command.assets_install" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.cache_clear" type="service_closure" id="console.command.cache_clear" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.cache_pool_clear" type="service_closure" id="console.command.cache_pool_clear" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.cache_pool_prune" type="service_closure" id="console.command.cache_pool_prune" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.cache_pool_invalidate_tags" type="service_closure" id="console.command.cache_pool_invalidate_tags" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.cache_pool_delete" type="service_closure" id="console.command.cache_pool_delete" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.cache_pool_list" type="service_closure" id="console.command.cache_pool_list" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.cache_warmup" type="service_closure" id="console.command.cache_warmup" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.config_debug" type="service_closure" id="console.command.config_debug" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.config_dump_reference" type="service_closure" id="console.command.config_dump_reference" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.container_debug" type="service_closure" id="console.command.container_debug" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.container_lint" type="service_closure" id="console.command.container_lint" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.debug_autowiring" type="service_closure" id="console.command.debug_autowiring" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.dotenv_debug" type="service_closure" id="console.command.dotenv_debug" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.event_dispatcher_debug" type="service_closure" id="console.command.event_dispatcher_debug" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.messenger_consume_messages" type="service_closure" id="console.command.messenger_consume_messages" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.messenger_setup_transports" type="service_closure" id="console.command.messenger_setup_transports" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.messenger_debug" type="service_closure" id="console.command.messenger_debug" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.messenger_stop_workers" type="service_closure" id="console.command.messenger_stop_workers" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.messenger_stats" type="service_closure" id="console.command.messenger_stats" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.router_debug" type="service_closure" id="console.command.router_debug" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.router_match" type="service_closure" id="console.command.router_match" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.validator_debug" type="service_closure" id="console.command.validator_debug" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.xliff_lint" type="service_closure" id="console.command.xliff_lint" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.yaml_lint" type="service_closure" id="console.command.yaml_lint" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.secrets_set" type="service_closure" id="console.command.secrets_set" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.secrets_remove" type="service_closure" id="console.command.secrets_remove" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.secrets_generate_key" type="service_closure" id="console.command.secrets_generate_key" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.secrets_list" type="service_closure" id="console.command.secrets_list" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.secrets_reveal" type="service_closure" id="console.command.secrets_reveal" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.secrets_decrypt_to_local" type="service_closure" id="console.command.secrets_decrypt_to_local" on-invalid="ignore_uninitialized"/>
        <argument key="console.command.secrets_encrypt_from_local" type="service_closure" id="console.command.secrets_encrypt_from_local" on-invalid="ignore_uninitialized"/>
        <argument key="console.messenger.application" type="service_closure" id="console.messenger.application" on-invalid="ignore_uninitialized"/>
        <argument key="console.messenger.execute_command_handler" type="service_closure" id="console.messenger.execute_command_handler" on-invalid="ignore_uninitialized"/>
        <argument key="cache.app.taggable" type="service_closure" id="cache.app.taggable" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service_closure" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service_closure" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service_closure" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="cache.messenger.restart_workers_signal" type="service_closure" id="cache.messenger.restart_workers_signal" on-invalid="ignore_uninitialized"/>
        <argument key="cache.default_marshaller" type="service_closure" id="cache.default_marshaller" on-invalid="ignore_uninitialized"/>
        <argument key="cache.default_clearer" type="service_closure" id="cache.default_clearer" on-invalid="ignore_uninitialized"/>
        <argument key="translator" type="service_closure" id="translator" on-invalid="ignore_uninitialized"/>
        <argument key="identity_translator" type="service_closure" id="identity_translator" on-invalid="ignore_uninitialized"/>
        <argument key="test.client.history" type="service_closure" id="test.client.history" on-invalid="ignore_uninitialized"/>
        <argument key="test.client.cookiejar" type="service_closure" id="test.client.cookiejar" on-invalid="ignore_uninitialized"/>
        <argument key="test.session.listener" type="service_closure" id="test.session.listener" on-invalid="ignore_uninitialized"/>
        <argument key="debug.debug_handlers_listener" type="service_closure" id="debug.debug_handlers_listener" on-invalid="ignore_uninitialized"/>
        <argument key="debug.file_link_formatter" type="service_closure" id="debug.file_link_formatter" on-invalid="ignore_uninitialized"/>
        <argument key="routing.resolver" type="service_closure" id="routing.resolver" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.xml" type="service_closure" id="routing.loader.xml" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.yml" type="service_closure" id="routing.loader.yml" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.php" type="service_closure" id="routing.loader.php" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.glob" type="service_closure" id="routing.loader.glob" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.directory" type="service_closure" id="routing.loader.directory" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.container" type="service_closure" id="routing.loader.container" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.attribute" type="service_closure" id="routing.loader.attribute" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.attribute.directory" type="service_closure" id="routing.loader.attribute.directory" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.attribute.file" type="service_closure" id="routing.loader.attribute.file" on-invalid="ignore_uninitialized"/>
        <argument key="routing.loader.psr4" type="service_closure" id="routing.loader.psr4" on-invalid="ignore_uninitialized"/>
        <argument key="router.default" type="service_closure" id="router.default" on-invalid="ignore_uninitialized"/>
        <argument key="router.request_context" type="service_closure" id="router.request_context" on-invalid="ignore_uninitialized"/>
        <argument key="router.cache_warmer" type="service_closure" id="router.cache_warmer" on-invalid="ignore_uninitialized"/>
        <argument key="router_listener" type="service_closure" id="router_listener" on-invalid="ignore_uninitialized"/>
        <argument key="secrets.vault" type="service_closure" id="secrets.vault" on-invalid="ignore_uninitialized"/>
        <argument key="secrets.env_var_loader" type="service_closure" id="secrets.env_var_loader" on-invalid="ignore_uninitialized"/>
        <argument key="secrets.decryption_key" type="service_closure" id="secrets.decryption_key" on-invalid="ignore_uninitialized"/>
        <argument key="secrets.local_vault" type="service_closure" id="secrets.local_vault" on-invalid="ignore_uninitialized"/>
        <argument key="session.factory" type="service_closure" id="session.factory" on-invalid="ignore_uninitialized"/>
        <argument key="session.storage.factory.native" type="service_closure" id="session.storage.factory.native" on-invalid="ignore_uninitialized"/>
        <argument key="session.storage.factory.php_bridge" type="service_closure" id="session.storage.factory.php_bridge" on-invalid="ignore_uninitialized"/>
        <argument key="session.storage.factory.mock_file" type="service_closure" id="session.storage.factory.mock_file" on-invalid="ignore_uninitialized"/>
        <argument key="session.handler.native" type="service_closure" id="session.handler.native" on-invalid="ignore_uninitialized"/>
        <argument key="session.handler.native_file" type="service_closure" id="session.handler.native_file" on-invalid="ignore_uninitialized"/>
        <argument key="session.abstract_handler" type="service_closure" id="session.abstract_handler" on-invalid="ignore_uninitialized"/>
        <argument key="session.marshaller" type="service_closure" id="session.marshaller" on-invalid="ignore_uninitialized"/>
        <argument key="validator" type="service_closure" id="validator" on-invalid="ignore_uninitialized"/>
        <argument key="validator.builder" type="service_closure" id="validator.builder" on-invalid="ignore_uninitialized"/>
        <argument key="validator.mapping.cache_warmer" type="service_closure" id="validator.mapping.cache_warmer" on-invalid="ignore_uninitialized"/>
        <argument key="validator.mapping.cache.adapter" type="service_closure" id="validator.mapping.cache.adapter" on-invalid="ignore_uninitialized"/>
        <argument key="validator.validator_factory" type="service_closure" id="validator.validator_factory" on-invalid="ignore_uninitialized"/>
        <argument key="validator.expression" type="service_closure" id="validator.expression" on-invalid="ignore_uninitialized"/>
        <argument key="validator.email" type="service_closure" id="validator.email" on-invalid="ignore_uninitialized"/>
        <argument key="validator.not_compromised_password" type="service_closure" id="validator.not_compromised_password" on-invalid="ignore_uninitialized"/>
        <argument key="validator.when" type="service_closure" id="validator.when" on-invalid="ignore_uninitialized"/>
        <argument key="validator.no_suspicious_characters" type="service_closure" id="validator.no_suspicious_characters" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.senders_locator" type="service_closure" id="messenger.senders_locator" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.transport.native_php_serializer" type="service_closure" id="messenger.transport.native_php_serializer" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.middleware.dispatch_after_current_bus" type="service_closure" id="messenger.middleware.dispatch_after_current_bus" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.middleware.validation" type="service_closure" id="messenger.middleware.validation" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.middleware.reject_redelivered_message_middleware" type="service_closure" id="messenger.middleware.reject_redelivered_message_middleware" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.middleware.failed_message_processing_middleware" type="service_closure" id="messenger.middleware.failed_message_processing_middleware" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.middleware.router_context" type="service_closure" id="messenger.middleware.router_context" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.receiver_locator" type="service_closure" id="messenger.receiver_locator" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.transport_factory" type="service_closure" id="messenger.transport_factory" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.transport.sync.factory" type="service_closure" id="messenger.transport.sync.factory" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.transport.in_memory.factory" type="service_closure" id="messenger.transport.in_memory.factory" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.retry_strategy_locator" type="service_closure" id="messenger.retry_strategy_locator" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.retry.send_failed_message_for_retry_listener" type="service_closure" id="messenger.retry.send_failed_message_for_retry_listener" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.failure.add_error_details_stamp_listener" type="service_closure" id="messenger.failure.add_error_details_stamp_listener" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.listener.dispatch_pcntl_signal_listener" type="service_closure" id="messenger.listener.dispatch_pcntl_signal_listener" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.listener.stop_worker_on_restart_signal_listener" type="service_closure" id="messenger.listener.stop_worker_on_restart_signal_listener" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.listener.stop_worker_on_stop_exception_listener" type="service_closure" id="messenger.listener.stop_worker_on_stop_exception_listener" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.listener.reset_services" type="service_closure" id="messenger.listener.reset_services" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.routable_message_bus" type="service_closure" id="messenger.routable_message_bus" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.redispatch_message_handler" type="service_closure" id="messenger.redispatch_message_handler" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.bus.default" type="service_closure" id="messenger.bus.default" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.bus.default.middleware.add_bus_name_stamp_middleware" type="service_closure" id="messenger.bus.default.middleware.add_bus_name_stamp_middleware" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.bus.default.middleware.send_message" type="service_closure" id="messenger.bus.default.middleware.send_message" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.bus.default.middleware.handle_message" type="service_closure" id="messenger.bus.default.middleware.handle_message" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.bus.default.messenger.handlers_locator" type="service_closure" id="messenger.bus.default.messenger.handlers_locator" on-invalid="ignore_uninitialized"/>
        <argument key="logger" type="service_closure" id="logger" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Domain\Bus\Event\EventBus" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Event\InMemory\InMemorySymfonyEventBus" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Courses\Domain\BackofficeCourseRepository" type="service_closure" id="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\ElasticsearchBackofficeCourseRepository" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Domain\Bus\Command\CommandBus" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBus" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Domain\Bus\Command\CommandHandler" type="service_closure" id="CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandHandler" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Domain\Bus\Event\DomainEventSubscriber" type="service_closure" id="CodelyTv\Backoffice\Courses\Application\Create\CreateBackofficeCourseOnCourseCreated" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Domain\Bus\Query\QueryBus" type="service_closure" id="CodelyTv\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBus" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Domain\Bus\Query\Response" type="service_closure" id="CodelyTv\Backoffice\Courses\Application\BackofficeCoursesResponse" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Domain\RandomNumberGenerator" type="service_closure" id="CodelyTv\Shared\Infrastructure\PhpRandomNumberGenerator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Shared\Domain\UuidGenerator" type="service_closure" id="CodelyTv\Shared\Infrastructure\RamseyUuidGenerator" on-invalid="ignore_uninitialized"/>
        <argument key="CodelyTv\Backoffice\Auth\Domain\AuthRepository" type="service_closure" id="CodelyTv\Backoffice\Auth\Infrastructure\Persistence\InMemoryAuthRepository" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface" type="service_closure" id="parameter_bag" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface" type="service_closure" id="parameter_bag" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\EventDispatcher\EventDispatcherInterface" type="service_closure" id="event_dispatcher" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Contracts\EventDispatcher\EventDispatcherInterface" type="service_closure" id="event_dispatcher" on-invalid="ignore_uninitialized"/>
        <argument key="Psr\EventDispatcher\EventDispatcherInterface" type="service_closure" id="event_dispatcher" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpKernel\HttpKernelInterface" type="service_closure" id="http_kernel" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpFoundation\RequestStack" type="service_closure" id="request_stack" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpKernel\HttpCache\StoreInterface" type="service_closure" id="http_cache.store" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpFoundation\UrlHelper" type="service_closure" id="url_helper" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpKernel\KernelInterface" type="service_closure" id="kernel" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Filesystem\Filesystem" type="service_closure" id="filesystem" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpKernel\Config\FileLocator" type="service_closure" id="file_locator" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpFoundation\UriSigner" type="service_closure" id="uri_signer" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\DependencyInjection\ReverseContainer" type="service_closure" id="reverse_container" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Clock\ClockInterface" type="service_closure" id="clock" on-invalid="ignore_uninitialized"/>
        <argument key="Psr\Clock\ClockInterface" type="service_closure" id="clock" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpKernel\Fragment\FragmentUriGeneratorInterface" type="service_closure" id="fragment.uri_generator" on-invalid="ignore_uninitialized"/>
        <argument key="error_renderer.html" type="service_closure" id="error_handler.error_renderer.html" on-invalid="ignore_uninitialized"/>
        <argument key="error_renderer" type="service_closure" id="error_handler.error_renderer.html" on-invalid="ignore_uninitialized"/>
        <argument key="Psr\Container\ContainerInterface $parameterBag" type="service_closure" id="parameter_bag" on-invalid="ignore_uninitialized"/>
        <argument key="Psr\Cache\CacheItemPoolInterface" type="service_closure" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Contracts\Cache\CacheInterface" type="service_closure" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Contracts\Cache\TagAwareCacheInterface" type="service_closure" id="cache.app.taggable" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Contracts\Translation\TranslatorInterface" type="service_closure" id="translator" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\ErrorHandler\ErrorRenderer\FileLinkFormatter" type="service_closure" id="debug.file_link_formatter" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Routing\RouterInterface" type="service_closure" id="router.default" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Routing\Generator\UrlGeneratorInterface" type="service_closure" id="router.default" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Routing\Matcher\UrlMatcherInterface" type="service_closure" id="router.default" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Routing\RequestContextAwareInterface" type="service_closure" id="router.default" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Routing\RequestContext" type="service_closure" id="router.request_context" on-invalid="ignore_uninitialized"/>
        <argument key="cache.default_redis_provider" type="service_closure" id=".cache_connection.MfCypIA" on-invalid="ignore_uninitialized"/>
        <argument key="cache.default_memcached_provider" type="service_closure" id=".cache_connection.8kvDmRs" on-invalid="ignore_uninitialized"/>
        <argument key="SessionHandlerInterface" type="service_closure" id="session.handler.native" on-invalid="ignore_uninitialized"/>
        <argument key="session.storage.factory" type="service_closure" id="session.storage.factory.native" on-invalid="ignore_uninitialized"/>
        <argument key="session.handler" type="service_closure" id="session.handler.native" on-invalid="ignore_uninitialized"/>
        <argument key="session_listener" type="service_closure" id="test.session.listener" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Validator\Validator\ValidatorInterface" type="service_closure" id="validator" on-invalid="ignore_uninitialized"/>
        <argument key="validator.mapping.class_metadata_factory" type="service_closure" id="validator" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.default_serializer" type="service_closure" id="messenger.transport.native_php_serializer" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\Messenger\MessageBusInterface" type="service_closure" id="messenger.bus.default" on-invalid="ignore_uninitialized"/>
        <argument key="Behat\Mink\Mink" type="service_closure" id="behat.mink" on-invalid="ignore_uninitialized"/>
        <argument key="Behat\Mink\Session" type="service_closure" id="behat.mink.default_session" on-invalid="ignore_uninitialized"/>
        <argument key="FriendsOfBehat\SymfonyExtension\Mink\MinkParameters" type="service_closure" id="behat.mink.parameters" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\DependencyInjection\ContainerInterface $driverContainer" type="service_closure" id="behat.driver.service_container" on-invalid="ignore_uninitialized"/>
        <argument key="argument_resolver.controller_locator" type="service_closure" id=".service_locator.Sr6W89v" on-invalid="ignore_uninitialized"/>
        <argument key="Psr\Log\LoggerInterface" type="service_closure" id="logger" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Bundle\FrameworkBundle\KernelBrowser" type="service_closure" id="test.client" on-invalid="ignore_uninitialized"/>
        <argument key="Symfony\Component\HttpKernel\HttpKernelBrowser" type="service_closure" id="test.client" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="debug.error_handler_configurator" class="Symfony\Component\HttpKernel\Debug\ErrorHandlerConfigurator" public="true">
      <tag name="monolog.logger" channel="php"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>null</argument>
      <argument>-1</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>null</argument>
    </service>
    <service id="debug.debug_handlers_listener" class="Symfony\Component\HttpKernel\EventListener\DebugHandlersListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument>null</argument>
      <argument>%env(bool:default::key:web:default:kernel.runtime_mode:)%</argument>
    </service>
    <service id="debug.file_link_formatter" class="Symfony\Component\ErrorHandler\ErrorRenderer\FileLinkFormatter">
      <argument>%env(default::SYMFONY_IDE)%</argument>
    </service>
    <service id="routing.resolver" class="Symfony\Component\Config\Loader\LoaderResolver">
      <call method="addLoader">
        <argument type="service" id="routing.loader.xml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.php"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.glob"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.container"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.attribute"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.attribute.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.attribute.file"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.psr4"/>
      </call>
    </service>
    <service id="routing.loader.xml" class="Symfony\Component\Routing\Loader\XmlFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>test</argument>
    </service>
    <service id="routing.loader.yml" class="Symfony\Component\Routing\Loader\YamlFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>test</argument>
    </service>
    <service id="routing.loader.php" class="Symfony\Component\Routing\Loader\PhpFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>test</argument>
    </service>
    <service id="routing.loader.glob" class="Symfony\Component\Routing\Loader\GlobFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>test</argument>
    </service>
    <service id="routing.loader.directory" class="Symfony\Component\Routing\Loader\DirectoryLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>test</argument>
    </service>
    <service id="routing.loader.container" class="Symfony\Component\Routing\Loader\ContainerLoader">
      <tag name="routing.loader"/>
      <argument type="service" id=".service_locator.nPS6N2V"/>
      <argument>test</argument>
    </service>
    <service id="routing.loader.attribute" class="Symfony\Bundle\FrameworkBundle\Routing\AttributeRouteControllerLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument>test</argument>
    </service>
    <service id="routing.loader.attribute.directory" class="Symfony\Component\Routing\Loader\AttributeDirectoryLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.attribute"/>
    </service>
    <service id="routing.loader.attribute.file" class="Symfony\Component\Routing\Loader\AttributeFileLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.attribute"/>
    </service>
    <service id="routing.loader.psr4" class="Symfony\Component\Routing\Loader\Psr4DirectoryLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader" class="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader" public="true">
      <argument type="service" id="routing.resolver"/>
      <argument type="collection">
        <argument key="utf8">true</argument>
      </argument>
      <argument type="collection"/>
    </service>
    <service id="router.default" class="Symfony\Bundle\FrameworkBundle\Routing\Router">
      <tag name="monolog.logger" channel="router"/>
      <tag name="container.service_subscriber" id="routing.loader"/>
      <argument type="service" id=".service_locator.JI6krIU.router.default"/>
      <argument>kernel::loadRoutes</argument>
      <argument type="collection">
        <argument key="cache_dir">/app/apps/backoffice/backend/var/cache/test</argument>
        <argument key="debug">true</argument>
        <argument key="generator_class">Symfony\Component\Routing\Generator\CompiledUrlGenerator</argument>
        <argument key="generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\CompiledUrlGeneratorDumper</argument>
        <argument key="matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableCompiledUrlMatcher</argument>
        <argument key="matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\CompiledUrlMatcherDumper</argument>
        <argument key="strict_requirements">true</argument>
        <argument key="resource_type">service</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="parameter_bag" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>en</argument>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
    </service>
    <service id="router.request_context" class="Symfony\Component\Routing\RequestContext" constructor="fromUri">
      <argument></argument>
      <argument>localhost</argument>
      <argument>http</argument>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="router.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer">
      <tag name="container.service_subscriber" id="router"/>
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id=".service_locator.YAcX0.U.router.cache_warmer"/>
    </service>
    <service id="router_listener" class="Symfony\Component\HttpKernel\EventListener\RouterListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>/app/apps/backoffice/backend</argument>
      <argument>true</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" class="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" public="true">
      <argument type="service" id="router.default"/>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpPort"/>
        </service>
      </argument>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpsPort"/>
        </service>
      </argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" class="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" public="true">
      <argument>null</argument>
    </service>
    <service id="secrets.vault" class="Symfony\Bundle\FrameworkBundle\Secrets\SodiumVault">
      <argument>/app/apps/backoffice/backend/config/secrets/%env(default:kernel.environment:APP_RUNTIME_ENV)%</argument>
      <argument type="service" id="secrets.decryption_key" on-invalid="ignore"/>
    </service>
    <service id="secrets.env_var_loader" class="Symfony\Component\DependencyInjection\StaticEnvVarLoader">
      <tag name="container.env_var_loader"/>
      <argument type="service" id="secrets.vault"/>
    </service>
    <service id="secrets.decryption_key" class="Symfony\Component\String\LazyString" constructor="fromCallable">
      <argument type="service" id="container.getenv"/>
      <argument>base64:default::SYMFONY_DECRYPTION_SECRET</argument>
    </service>
    <service id="secrets.local_vault" class="Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault">
      <argument>/app/apps/backoffice/backend/.env.test.local</argument>
    </service>
    <service id=".cache_connection.MfCypIA" class="Symfony\Component\Cache\Adapter\AbstractAdapter" constructor="createConnection">
      <argument>redis://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
    </service>
    <service id=".cache_connection.8kvDmRs" class="Symfony\Component\Cache\Adapter\AbstractAdapter" constructor="createConnection">
      <argument>memcached://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
    </service>
    <service id="session.factory" class="Symfony\Component\HttpFoundation\Session\SessionFactory">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="session.storage.factory.native"/>
      <argument type="collection">
        <argument type="service" id="test.session.listener"/>
        <argument>onSessionUsage</argument>
      </argument>
    </service>
    <service id="session.storage.factory.native" class="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorageFactory">
      <argument>%session.storage.options%</argument>
      <argument type="service" id="session.handler.native"/>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
      <argument>true</argument>
    </service>
    <service id="session.storage.factory.php_bridge" class="Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorageFactory">
      <argument type="service" id="session.handler.native"/>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
      <argument>true</argument>
    </service>
    <service id="session.storage.factory.mock_file" class="Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorageFactory">
      <argument>/app/apps/backoffice/backend/var/cache/test/sessions</argument>
      <argument>MOCKSESSID</argument>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
    </service>
    <service id="session.handler.native" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler">
      <argument type="service">
        <service class="SessionHandler"/>
      </argument>
    </service>
    <service id="session.handler.native_file" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler">
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler">
          <argument>null</argument>
        </service>
      </argument>
    </service>
    <service id="session.abstract_handler" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler">
      <argument type="abstract">A string or a connection object</argument>
      <argument type="collection"/>
      <factory class="Symfony\Component\HttpFoundation\Session\Storage\Handler\SessionHandlerFactory" method="createHandler"/>
    </service>
    <service id="session.marshaller" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\IdentityMarshaller"/>
    <service id="validator" class="Symfony\Component\Validator\Validator\ValidatorInterface">
      <factory service="validator.builder" method="getValidator"/>
    </service>
    <service id="validator.builder" class="Symfony\Component\Validator\ValidatorBuilder">
      <call method="setConstraintValidatorFactory">
        <argument type="service" id="validator.validator_factory"/>
      </call>
      <call method="setGroupProviderLocator">
        <argument type="service" id="messenger.retry_strategy_locator"/>
      </call>
      <call method="setTranslator">
        <argument type="service" id="translator" on-invalid="ignore"/>
      </call>
      <call method="setTranslationDomain">
        <argument>validators</argument>
      </call>
      <call method="enableAttributeMapping"/>
      <call method="addMethodMapping">
        <argument>loadValidatorMetadata</argument>
      </call>
      <call method="addObjectInitializers">
        <argument type="collection"/>
      </call>
      <factory class="Symfony\Component\Validator\Validation" method="createValidatorBuilder"/>
    </service>
    <service id="validator.mapping.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\ValidatorCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="validator.builder"/>
      <argument>/app/apps/backoffice/backend/var/cache/test/validation.php</argument>
    </service>
    <service id="validator.mapping.cache.adapter" class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" constructor="create">
      <argument>/app/apps/backoffice/backend/var/cache/test/validation.php</argument>
      <argument type="service" id="cache.validator"/>
    </service>
    <service id="validator.validator_factory" class="Symfony\Component\Validator\ContainerConstraintValidatorFactory">
      <argument type="service" id=".service_locator.0i2HhdP"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\AllValidator" class="Symfony\Component\Validator\Constraints\AllValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\AtLeastOneOfValidator" class="Symfony\Component\Validator\Constraints\AtLeastOneOfValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\BicValidator" class="Symfony\Component\Validator\Constraints\BicValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\BlankValidator" class="Symfony\Component\Validator\Constraints\BlankValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CallbackValidator" class="Symfony\Component\Validator\Constraints\CallbackValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CardSchemeValidator" class="Symfony\Component\Validator\Constraints\CardSchemeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CharsetValidator" class="Symfony\Component\Validator\Constraints\CharsetValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ChoiceValidator" class="Symfony\Component\Validator\Constraints\ChoiceValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CidrValidator" class="Symfony\Component\Validator\Constraints\CidrValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CollectionValidator" class="Symfony\Component\Validator\Constraints\CollectionValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CompoundValidator" class="Symfony\Component\Validator\Constraints\CompoundValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CountValidator" class="Symfony\Component\Validator\Constraints\CountValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CountryValidator" class="Symfony\Component\Validator\Constraints\CountryValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CssColorValidator" class="Symfony\Component\Validator\Constraints\CssColorValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CurrencyValidator" class="Symfony\Component\Validator\Constraints\CurrencyValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\DateTimeValidator" class="Symfony\Component\Validator\Constraints\DateTimeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\DateValidator" class="Symfony\Component\Validator\Constraints\DateValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\DivisibleByValidator" class="Symfony\Component\Validator\Constraints\DivisibleByValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\EmailValidator" class="Symfony\Component\Validator\Constraints\EmailValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\EqualToValidator" class="Symfony\Component\Validator\Constraints\EqualToValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ExpressionSyntaxValidator" class="Symfony\Component\Validator\Constraints\ExpressionSyntaxValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ExpressionValidator" class="Symfony\Component\Validator\Constraints\ExpressionValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\FileValidator" class="Symfony\Component\Validator\Constraints\FileValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\GreaterThanOrEqualValidator" class="Symfony\Component\Validator\Constraints\GreaterThanOrEqualValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\GreaterThanValidator" class="Symfony\Component\Validator\Constraints\GreaterThanValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\HostnameValidator" class="Symfony\Component\Validator\Constraints\HostnameValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IbanValidator" class="Symfony\Component\Validator\Constraints\IbanValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IdenticalToValidator" class="Symfony\Component\Validator\Constraints\IdenticalToValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ImageValidator" class="Symfony\Component\Validator\Constraints\ImageValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IpValidator" class="Symfony\Component\Validator\Constraints\IpValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsFalseValidator" class="Symfony\Component\Validator\Constraints\IsFalseValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsNullValidator" class="Symfony\Component\Validator\Constraints\IsNullValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsTrueValidator" class="Symfony\Component\Validator\Constraints\IsTrueValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsbnValidator" class="Symfony\Component\Validator\Constraints\IsbnValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsinValidator" class="Symfony\Component\Validator\Constraints\IsinValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IssnValidator" class="Symfony\Component\Validator\Constraints\IssnValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\JsonValidator" class="Symfony\Component\Validator\Constraints\JsonValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LanguageValidator" class="Symfony\Component\Validator\Constraints\LanguageValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LengthValidator" class="Symfony\Component\Validator\Constraints\LengthValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LessThanOrEqualValidator" class="Symfony\Component\Validator\Constraints\LessThanOrEqualValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LessThanValidator" class="Symfony\Component\Validator\Constraints\LessThanValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LocaleValidator" class="Symfony\Component\Validator\Constraints\LocaleValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LuhnValidator" class="Symfony\Component\Validator\Constraints\LuhnValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\MacAddressValidator" class="Symfony\Component\Validator\Constraints\MacAddressValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator" class="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotBlankValidator" class="Symfony\Component\Validator\Constraints\NotBlankValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator" class="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotEqualToValidator" class="Symfony\Component\Validator\Constraints\NotEqualToValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotIdenticalToValidator" class="Symfony\Component\Validator\Constraints\NotIdenticalToValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotNullValidator" class="Symfony\Component\Validator\Constraints\NotNullValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\PasswordStrengthValidator" class="Symfony\Component\Validator\Constraints\PasswordStrengthValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\RangeValidator" class="Symfony\Component\Validator\Constraints\RangeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\RegexValidator" class="Symfony\Component\Validator\Constraints\RegexValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\SequentiallyValidator" class="Symfony\Component\Validator\Constraints\SequentiallyValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\TimeValidator" class="Symfony\Component\Validator\Constraints\TimeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\TimezoneValidator" class="Symfony\Component\Validator\Constraints\TimezoneValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\TypeValidator" class="Symfony\Component\Validator\Constraints\TypeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\UlidValidator" class="Symfony\Component\Validator\Constraints\UlidValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\UniqueValidator" class="Symfony\Component\Validator\Constraints\UniqueValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\UrlValidator" class="Symfony\Component\Validator\Constraints\UrlValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\UuidValidator" class="Symfony\Component\Validator\Constraints\UuidValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ValidValidator" class="Symfony\Component\Validator\Constraints\ValidValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\WhenValidator" class="Symfony\Component\Validator\Constraints\WhenValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="validator.expression" class="Symfony\Component\Validator\Constraints\ExpressionValidator">
      <tag name="validator.constraint_validator" alias="validator.expression"/>
      <argument>null</argument>
    </service>
    <service id="cache.validator_expression_language" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>ZcSNEF1J7T</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/app/apps/backoffice/backend/var/cache/test/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="validator.email" class="Symfony\Component\Validator\Constraints\EmailValidator">
      <tag name="validator.constraint_validator"/>
      <argument>html5</argument>
    </service>
    <service id="validator.not_compromised_password" class="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator">
      <tag name="validator.constraint_validator"/>
      <argument>null</argument>
      <argument>UTF-8</argument>
      <argument>true</argument>
      <argument>null</argument>
    </service>
    <service id="validator.when" class="Symfony\Component\Validator\Constraints\WhenValidator">
      <tag name="validator.constraint_validator"/>
      <argument>null</argument>
    </service>
    <service id="validator.no_suspicious_characters" class="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator">
      <tag name="validator.constraint_validator" alias="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator"/>
      <argument type="collection"/>
    </service>
    <service id="messenger.senders_locator" class="Symfony\Component\Messenger\Transport\Sender\SendersLocator">
      <argument type="collection"/>
      <argument type="service" id="messenger.retry_strategy_locator"/>
    </service>
    <service id="messenger.middleware.send_message" class="Symfony\Component\Messenger\Middleware\SendMessageMiddleware" abstract="true">
      <tag name="monolog.logger" channel="messenger"/>
      <argument type="service" id="messenger.senders_locator"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="messenger.transport.native_php_serializer" class="Symfony\Component\Messenger\Transport\Serialization\PhpSerializer"/>
    <service id="messenger.middleware.handle_message" class="Symfony\Component\Messenger\Middleware\HandleMessageMiddleware" abstract="true">
      <tag name="monolog.logger" channel="messenger"/>
      <argument type="abstract">bus handler resolver</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="messenger.middleware.add_bus_name_stamp_middleware" class="Symfony\Component\Messenger\Middleware\AddBusNameStampMiddleware" abstract="true"/>
    <service id="messenger.middleware.dispatch_after_current_bus" class="Symfony\Component\Messenger\Middleware\DispatchAfterCurrentBusMiddleware"/>
    <service id="messenger.middleware.validation" class="Symfony\Component\Messenger\Middleware\ValidationMiddleware">
      <argument type="service" id="validator"/>
    </service>
    <service id="messenger.middleware.reject_redelivered_message_middleware" class="Symfony\Component\Messenger\Middleware\RejectRedeliveredMessageMiddleware"/>
    <service id="messenger.middleware.failed_message_processing_middleware" class="Symfony\Component\Messenger\Middleware\FailedMessageProcessingMiddleware"/>
    <service id="messenger.middleware.traceable" class="Symfony\Component\Messenger\Middleware\TraceableMiddleware" abstract="true">
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="messenger.middleware.router_context" class="Symfony\Component\Messenger\Middleware\RouterContextMiddleware">
      <argument type="service" id="router.default"/>
    </service>
    <service id="messenger.receiver_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id="messenger.transport_factory" class="Symfony\Component\Messenger\Transport\TransportFactory">
      <argument type="tagged_iterator" tag="messenger.transport_factory"/>
    </service>
    <service id="messenger.transport.sync.factory" class="Symfony\Component\Messenger\Transport\Sync\SyncTransportFactory">
      <tag name="messenger.transport_factory"/>
      <argument type="service" id="messenger.routable_message_bus"/>
    </service>
    <service id="messenger.transport.in_memory.factory" class="Symfony\Component\Messenger\Transport\InMemory\InMemoryTransportFactory">
      <tag name="messenger.transport_factory"/>
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="clock" on-invalid="null"/>
    </service>
    <service id="messenger.retry_strategy_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id="messenger.retry.abstract_multiplier_retry_strategy" class="Symfony\Component\Messenger\Retry\MultiplierRetryStrategy" abstract="true">
      <argument type="abstract">max retries</argument>
      <argument type="abstract">delay ms</argument>
      <argument type="abstract">multiplier</argument>
      <argument type="abstract">max delay ms</argument>
      <argument type="abstract">jitter</argument>
    </service>
    <service id="messenger.retry.send_failed_message_for_retry_listener" class="Symfony\Component\Messenger\EventListener\SendFailedMessageForRetryListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="messenger"/>
      <argument type="service" id="messenger.retry_strategy_locator"/>
      <argument type="service" id="messenger.retry_strategy_locator"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="messenger.failure.add_error_details_stamp_listener" class="Symfony\Component\Messenger\EventListener\AddErrorDetailsStampListener">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="messenger.listener.dispatch_pcntl_signal_listener" class="Symfony\Component\Messenger\EventListener\DispatchPcntlSignalListener">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="messenger.listener.stop_worker_on_restart_signal_listener" class="Symfony\Component\Messenger\EventListener\StopWorkerOnRestartSignalListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="messenger"/>
      <argument type="service" id="cache.messenger.restart_workers_signal"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
    </service>
    <service id="messenger.listener.stop_worker_on_stop_exception_listener" class="Symfony\Component\Messenger\EventListener\StopWorkerOnCustomStopExceptionListener">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="messenger.listener.reset_services" class="Symfony\Component\Messenger\EventListener\ResetServicesListener">
      <argument type="service" id="services_resetter"/>
    </service>
    <service id="messenger.routable_message_bus" class="Symfony\Component\Messenger\RoutableMessageBus">
      <argument type="service" id=".service_locator.IlGSE9J"/>
      <argument type="service" id="messenger.bus.default"/>
    </service>
    <service id="messenger.redispatch_message_handler" class="Symfony\Component\Messenger\Handler\RedispatchMessageHandler">
      <tag name="messenger.message_handler"/>
      <argument type="service" id="messenger.bus.default"/>
    </service>
    <service id="messenger.bus.default" class="Symfony\Component\Messenger\MessageBus">
      <tag name="messenger.bus"/>
      <argument type="iterator">
        <argument type="service" id="messenger.bus.default.middleware.add_bus_name_stamp_middleware"/>
        <argument type="service" id="messenger.middleware.reject_redelivered_message_middleware"/>
        <argument type="service" id="messenger.middleware.dispatch_after_current_bus"/>
        <argument type="service" id="messenger.middleware.failed_message_processing_middleware"/>
        <argument type="service" id="messenger.bus.default.middleware.send_message"/>
        <argument type="service" id="messenger.bus.default.middleware.handle_message"/>
      </argument>
    </service>
    <service id="behat.mink" class="Behat\Mink\Mink" public="true" lazy="true">
      <argument>fob_symfony.mink</argument>
      <factory service="behat.service_container" method="get"/>
    </service>
    <service id="behat.mink.default_session" class="Behat\Mink\Session" public="true" lazy="true">
      <factory service="behat.mink" method="getSession"/>
    </service>
    <service id="behat.mink.parameters" class="FriendsOfBehat\SymfonyExtension\Mink\MinkParameters" public="true" lazy="true">
      <argument>fob_symfony.mink.parameters</argument>
      <factory service="behat.service_container" method="get"/>
    </service>
    <service id="behat.service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" synthetic="true"/>
    <service id="behat.driver.service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" lazy="true">
      <argument>test.service_container</argument>
      <factory method="get">
        <service class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" lazy="true">
          <factory method="getContainer">
            <service class="Symfony\Component\HttpKernel\KernelInterface" public="true" lazy="true">
              <argument>fob_symfony.driver_kernel</argument>
              <factory service="behat.service_container" method="get"/>
            </service>
          </factory>
        </service>
      </factory>
    </service>
    <service id=".instanceof.CodelyTv\Shared\Domain\Bus\Command\CommandHandler.0.CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandHandler" class="CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandHandler" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandHandler" class="CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandHandler" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.CodelyTv\Shared\Domain\Bus\Event\DomainEventSubscriber.0.CodelyTv\Backoffice\Courses\Application\Create\CreateBackofficeCourseOnCourseCreated" class="CodelyTv\Backoffice\Courses\Application\Create\CreateBackofficeCourseOnCourseCreated" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.CodelyTv\Backoffice\Courses\Application\Create\CreateBackofficeCourseOnCourseCreated" class="CodelyTv\Backoffice\Courses\Application\Create\CreateBackofficeCourseOnCourseCreated" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.CodelyTv\Shared\Domain\Bus\Query\QueryHandler.0.CodelyTv\Backoffice\Courses\Application\SearchAll\SearchAllBackofficeCoursesQueryHandler" class="CodelyTv\Backoffice\Courses\Application\SearchAll\SearchAllBackofficeCoursesQueryHandler" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.CodelyTv\Backoffice\Courses\Application\SearchAll\SearchAllBackofficeCoursesQueryHandler" class="CodelyTv\Backoffice\Courses\Application\SearchAll\SearchAllBackofficeCoursesQueryHandler" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.CodelyTv\Shared\Domain\Bus\Query\QueryHandler.0.CodelyTv\Backoffice\Courses\Application\SearchByCriteria\SearchBackofficeCoursesByCriteriaQueryHandler" class="CodelyTv\Backoffice\Courses\Application\SearchByCriteria\SearchBackofficeCoursesByCriteriaQueryHandler" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.CodelyTv\Backoffice\Courses\Application\SearchByCriteria\SearchBackofficeCoursesByCriteriaQueryHandler" class="CodelyTv\Backoffice\Courses\Application\SearchByCriteria\SearchBackofficeCoursesByCriteriaQueryHandler" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Behat\Behat\Context\Context.0.CodelyTv\Tests\Shared\Infrastructure\Behat\ApiContext" class="CodelyTv\Tests\Shared\Infrastructure\Behat\ApiContext" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.CodelyTv\Tests\Shared\Infrastructure\Behat\ApiContext" class="CodelyTv\Tests\Shared\Infrastructure\Behat\ApiContext" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Behat\Behat\Context\Context.0.CodelyTv\Tests\Shared\Infrastructure\Behat\ApplicationFeatureContext" class="CodelyTv\Tests\Shared\Infrastructure\Behat\ApplicationFeatureContext" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.CodelyTv\Tests\Shared\Infrastructure\Behat\ApplicationFeatureContext" class="CodelyTv\Tests\Shared\Infrastructure\Behat\ApplicationFeatureContext" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".service_locator.pRu6x_4" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="base64" type="service_closure" id="container.env_var_processor"/>
        <argument key="bool" type="service_closure" id="container.env_var_processor"/>
        <argument key="not" type="service_closure" id="container.env_var_processor"/>
        <argument key="const" type="service_closure" id="container.env_var_processor"/>
        <argument key="csv" type="service_closure" id="container.env_var_processor"/>
        <argument key="file" type="service_closure" id="container.env_var_processor"/>
        <argument key="float" type="service_closure" id="container.env_var_processor"/>
        <argument key="int" type="service_closure" id="container.env_var_processor"/>
        <argument key="json" type="service_closure" id="container.env_var_processor"/>
        <argument key="key" type="service_closure" id="container.env_var_processor"/>
        <argument key="url" type="service_closure" id="container.env_var_processor"/>
        <argument key="query_string" type="service_closure" id="container.env_var_processor"/>
        <argument key="resolve" type="service_closure" id="container.env_var_processor"/>
        <argument key="default" type="service_closure" id="container.env_var_processor"/>
        <argument key="string" type="service_closure" id="container.env_var_processor"/>
        <argument key="trim" type="service_closure" id="container.env_var_processor"/>
        <argument key="require" type="service_closure" id="container.env_var_processor"/>
        <argument key="enum" type="service_closure" id="container.env_var_processor"/>
        <argument key="shuffle" type="service_closure" id="container.env_var_processor"/>
        <argument key="defined" type="service_closure" id="container.env_var_processor"/>
        <argument key="urlencode" type="service_closure" id="container.env_var_processor"/>
      </argument>
    </service>
    <service id=".service_locator.4wc4Ag1" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="loader" type="service_closure" id=".errored..service_locator.4wc4Ag1.Symfony\Component\Config\Loader\LoaderInterface"/>
      </argument>
    </service>
    <service id=".service_locator.4wc4Ag1.kernel::registerContainerConfiguration()" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="kernel::registerContainerConfiguration()"/>
      <argument>kernel::registerContainerConfiguration()</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.4wc4Ag1" method="withContext"/>
    </service>
    <service id=".service_locator.4wc4Ag1.kernel::loadRoutes()" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="kernel::loadRoutes()"/>
      <argument>kernel::loadRoutes()</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.4wc4Ag1" method="withContext"/>
    </service>
    <service id=".service_locator.Sr6W89v" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="kernel::registerContainerConfiguration" type="service_closure" id=".service_locator.4wc4Ag1.kernel::registerContainerConfiguration()"/>
        <argument key="kernel::loadRoutes" type="service_closure" id=".service_locator.4wc4Ag1.kernel::loadRoutes()"/>
        <argument key="kernel:registerContainerConfiguration" type="service_closure" id=".service_locator.4wc4Ag1.kernel::registerContainerConfiguration()"/>
        <argument key="kernel:loadRoutes" type="service_closure" id=".service_locator.4wc4Ag1.kernel::loadRoutes()"/>
      </argument>
    </service>
    <service id=".service_locator.0i2HhdP" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="validator.expression" type="service_closure" id="validator.expression"/>
        <argument key="Symfony\Component\Validator\Constraints\ExpressionValidator" type="service_closure" id="validator.expression"/>
        <argument key="Symfony\Component\Validator\Constraints\EmailValidator" type="service_closure" id="validator.email"/>
        <argument key="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator" type="service_closure" id="validator.not_compromised_password"/>
        <argument key="Symfony\Component\Validator\Constraints\WhenValidator" type="service_closure" id="validator.when"/>
        <argument key="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator" type="service_closure" id="validator.no_suspicious_characters"/>
      </argument>
    </service>
    <service id=".service_locator.va_rxC4" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="inline" type="service_closure" id="fragment.renderer.inline"/>
      </argument>
    </service>
    <service id="messenger.bus.default.middleware.add_bus_name_stamp_middleware" class="Symfony\Component\Messenger\Middleware\AddBusNameStampMiddleware">
      <argument>messenger.bus.default</argument>
    </service>
    <service id="messenger.bus.default.middleware.send_message" class="Symfony\Component\Messenger\Middleware\SendMessageMiddleware">
      <argument type="service" id="messenger.senders_locator"/>
      <argument type="service" id="event_dispatcher"/>
      <argument>true</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="messenger.bus.default.middleware.handle_message" class="Symfony\Component\Messenger\Middleware\HandleMessageMiddleware">
      <argument type="service" id="messenger.bus.default.messenger.handlers_locator"/>
      <argument>false</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id=".service_locator.IlGSE9J" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="messenger.bus.default" type="service_closure" id="messenger.bus.default"/>
      </argument>
    </service>
    <service id=".messenger.handler_descriptor.NumTeF8" class="Symfony\Component\Messenger\Handler\HandlerDescriptor">
      <argument type="service" id="console.messenger.execute_command_handler"/>
      <argument type="collection"/>
    </service>
    <service id=".messenger.handler_descriptor.jyyWvHw" class="Symfony\Component\Messenger\Handler\HandlerDescriptor">
      <argument type="service" id="messenger.redispatch_message_handler"/>
      <argument type="collection"/>
    </service>
    <service id="messenger.bus.default.messenger.handlers_locator" class="Symfony\Component\Messenger\Handler\HandlersLocator">
      <argument type="collection">
        <argument key="Symfony\Component\Console\Messenger\RunCommandMessage" type="iterator">
          <argument type="service" id=".messenger.handler_descriptor.NumTeF8"/>
        </argument>
        <argument key="Symfony\Component\Messenger\Message\RedispatchMessage" type="iterator">
          <argument type="service" id=".messenger.handler_descriptor.jyyWvHw"/>
        </argument>
      </argument>
    </service>
    <service id="logger" class="Symfony\Component\HttpKernel\Log\Logger">
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="request_stack"/>
      <argument>%env(bool:default::key:web:default:kernel.runtime_mode:)%</argument>
    </service>
    <service id=".service_locator.JI6krIU" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="routing.loader" type="service_closure" id="routing.loader"/>
      </argument>
    </service>
    <service id=".service_locator.JI6krIU.router.default" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="router.default"/>
      <argument>router.default</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.JI6krIU" method="withContext"/>
    </service>
    <service id=".service_locator.YAcX0.U" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="router" type="service_closure" id="router.default"/>
      </argument>
    </service>
    <service id=".service_locator.YAcX0.U.router.cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="router.cache_warmer"/>
      <argument>router.cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.YAcX0.U" method="withContext"/>
    </service>
    <service id=".service_locator.5vJX4PW" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver" type="service_closure" id="argument_resolver.request_payload"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver" type="service_closure" id="argument_resolver.query_parameter_value_resolver"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver" type="service_closure" id="argument_resolver.backed_enum_resolver"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver" type="service_closure" id="argument_resolver.datetime"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver" type="service_closure" id="argument_resolver.request_attribute"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver" type="service_closure" id="argument_resolver.request"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver" type="service_closure" id="argument_resolver.session"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver" type="service_closure" id="argument_resolver.service"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver" type="service_closure" id="argument_resolver.default"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver" type="service_closure" id="argument_resolver.variadic"/>
      </argument>
    </service>
    <service id=".service_locator.NLcq8cs" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="reverse_container" type="service_closure" id="reverse_container" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id=".service_locator.jkL9kAz" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="cache.app" type="service_closure" id="cache.app.taggable"/>
      </argument>
    </service>
    <service id=".service_locator.h7gfyOW" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="event_dispatcher" type="service_closure" id="event_dispatcher"/>
      </argument>
    </service>
    <service id=".service_locator.9ba7RnD" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="session_factory" type="service_closure" id="session.factory" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".service_locator.nPS6N2V" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="kernel" type="service_closure" id="kernel"/>
      </argument>
    </service>
    <service id=".errored..service_locator.4wc4Ag1.Symfony\Component\Config\Loader\LoaderInterface" class="Symfony\Component\Config\Loader\LoaderInterface">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.4wc4Ag1&quot;: it needs an instance of &quot;Symfony\Component\Config\Loader\LoaderInterface&quot; but this type has been excluded from autowiring."/>
    </service>
    <service id=".console.command.about.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>about</argument>
      <argument type="collection"/>
      <argument>Display information about the current project</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.about"/>
    </service>
    <service id=".console.command.assets_install.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>assets:install</argument>
      <argument type="collection"/>
      <argument>Install bundle's web assets under a public directory</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.assets_install"/>
    </service>
    <service id=".console.command.cache_clear.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:clear</argument>
      <argument type="collection"/>
      <argument>Clear the cache</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_clear"/>
    </service>
    <service id=".console.command.cache_pool_clear.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:clear</argument>
      <argument type="collection"/>
      <argument>Clear cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_clear"/>
    </service>
    <service id=".console.command.cache_pool_prune.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:prune</argument>
      <argument type="collection"/>
      <argument>Prune cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_prune"/>
    </service>
    <service id=".console.command.cache_pool_invalidate_tags.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:invalidate-tags</argument>
      <argument type="collection"/>
      <argument>Invalidate cache tags for all or a specific pool</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_invalidate_tags"/>
    </service>
    <service id=".console.command.cache_pool_delete.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:delete</argument>
      <argument type="collection"/>
      <argument>Delete an item from a cache pool</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_delete"/>
    </service>
    <service id=".console.command.cache_pool_list.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:list</argument>
      <argument type="collection"/>
      <argument>List available cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_list"/>
    </service>
    <service id=".console.command.cache_warmup.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:warmup</argument>
      <argument type="collection"/>
      <argument>Warm up an empty cache</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_warmup"/>
    </service>
    <service id=".console.command.config_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:config</argument>
      <argument type="collection"/>
      <argument>Dump the current configuration for an extension</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.config_debug"/>
    </service>
    <service id=".console.command.config_dump_reference.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>config:dump-reference</argument>
      <argument type="collection"/>
      <argument>Dump the default configuration for an extension</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.config_dump_reference"/>
    </service>
    <service id=".console.command.container_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:container</argument>
      <argument type="collection"/>
      <argument>Display current services for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.container_debug"/>
    </service>
    <service id=".console.command.container_lint.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lint:container</argument>
      <argument type="collection"/>
      <argument>Ensure that arguments injected into services match type declarations</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.container_lint"/>
    </service>
    <service id=".console.command.debug_autowiring.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:autowiring</argument>
      <argument type="collection"/>
      <argument>List classes/interfaces you can use for autowiring</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.debug_autowiring"/>
    </service>
    <service id=".console.command.dotenv_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:dotenv</argument>
      <argument type="collection"/>
      <argument>List all dotenv files with variables and values</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.dotenv_debug"/>
    </service>
    <service id=".console.command.event_dispatcher_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:event-dispatcher</argument>
      <argument type="collection"/>
      <argument>Display configured listeners for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.event_dispatcher_debug"/>
    </service>
    <service id=".console.command.messenger_consume_messages.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>messenger:consume</argument>
      <argument type="collection"/>
      <argument>Consume messages</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.messenger_consume_messages"/>
    </service>
    <service id=".console.command.messenger_setup_transports.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>messenger:setup-transports</argument>
      <argument type="collection"/>
      <argument>Prepare the required infrastructure for the transport</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.messenger_setup_transports"/>
    </service>
    <service id=".console.command.messenger_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:messenger</argument>
      <argument type="collection"/>
      <argument>List messages you can dispatch using the message buses</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.messenger_debug"/>
    </service>
    <service id=".console.command.messenger_stop_workers.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>messenger:stop-workers</argument>
      <argument type="collection"/>
      <argument>Stop workers after their current message</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.messenger_stop_workers"/>
    </service>
    <service id=".console.command.messenger_stats.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>messenger:stats</argument>
      <argument type="collection"/>
      <argument>Show the message count for one or more transports</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.messenger_stats"/>
    </service>
    <service id=".console.command.router_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:router</argument>
      <argument type="collection"/>
      <argument>Display current routes for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.router_debug"/>
    </service>
    <service id=".console.command.router_match.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>router:match</argument>
      <argument type="collection"/>
      <argument>Help debug routes by simulating a path info match</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.router_match"/>
    </service>
    <service id=".console.command.validator_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:validator</argument>
      <argument type="collection"/>
      <argument>Display validation constraints for classes</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.validator_debug"/>
    </service>
    <service id=".console.command.xliff_lint.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lint:xliff</argument>
      <argument type="collection"/>
      <argument>Lint an XLIFF file and outputs encountered errors</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.xliff_lint"/>
    </service>
    <service id=".console.command.yaml_lint.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lint:yaml</argument>
      <argument type="collection"/>
      <argument>Lint a YAML file and outputs encountered errors</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.yaml_lint"/>
    </service>
    <service id=".console.command.secrets_set.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:set</argument>
      <argument type="collection"/>
      <argument>Set a secret in the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_set"/>
    </service>
    <service id=".console.command.secrets_remove.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:remove</argument>
      <argument type="collection"/>
      <argument>Remove a secret from the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_remove"/>
    </service>
    <service id=".console.command.secrets_generate_key.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:generate-keys</argument>
      <argument type="collection"/>
      <argument>Generate new encryption keys</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_generate_key"/>
    </service>
    <service id=".console.command.secrets_list.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:list</argument>
      <argument type="collection"/>
      <argument>List all secrets</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_list"/>
    </service>
    <service id=".console.command.secrets_reveal.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:reveal</argument>
      <argument type="collection"/>
      <argument>Reveal the value of a secret</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_reveal"/>
    </service>
    <service id=".console.command.secrets_decrypt_to_local.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:decrypt-to-local</argument>
      <argument type="collection"/>
      <argument>Decrypt all secrets and stores them in the local vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_decrypt_to_local"/>
    </service>
    <service id=".console.command.secrets_encrypt_from_local.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:encrypt-from-local</argument>
      <argument type="collection"/>
      <argument>Encrypt all local secrets to the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_encrypt_from_local"/>
    </service>
    <service id="console.command_loader" class="Symfony\Component\Console\CommandLoader\ContainerCommandLoader" public="true">
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.13gwAf1"/>
      <argument type="collection">
        <argument key="about">console.command.about</argument>
        <argument key="assets:install">console.command.assets_install</argument>
        <argument key="cache:clear">console.command.cache_clear</argument>
        <argument key="cache:pool:clear">console.command.cache_pool_clear</argument>
        <argument key="cache:pool:prune">console.command.cache_pool_prune</argument>
        <argument key="cache:pool:invalidate-tags">console.command.cache_pool_invalidate_tags</argument>
        <argument key="cache:pool:delete">console.command.cache_pool_delete</argument>
        <argument key="cache:pool:list">console.command.cache_pool_list</argument>
        <argument key="cache:warmup">console.command.cache_warmup</argument>
        <argument key="debug:config">console.command.config_debug</argument>
        <argument key="config:dump-reference">console.command.config_dump_reference</argument>
        <argument key="debug:container">console.command.container_debug</argument>
        <argument key="lint:container">console.command.container_lint</argument>
        <argument key="debug:autowiring">console.command.debug_autowiring</argument>
        <argument key="debug:dotenv">console.command.dotenv_debug</argument>
        <argument key="debug:event-dispatcher">console.command.event_dispatcher_debug</argument>
        <argument key="messenger:consume">console.command.messenger_consume_messages</argument>
        <argument key="messenger:setup-transports">console.command.messenger_setup_transports</argument>
        <argument key="debug:messenger">console.command.messenger_debug</argument>
        <argument key="messenger:stop-workers">console.command.messenger_stop_workers</argument>
        <argument key="messenger:stats">console.command.messenger_stats</argument>
        <argument key="debug:router">console.command.router_debug</argument>
        <argument key="router:match">console.command.router_match</argument>
        <argument key="debug:validator">console.command.validator_debug</argument>
        <argument key="lint:xliff">console.command.xliff_lint</argument>
        <argument key="lint:yaml">console.command.yaml_lint</argument>
        <argument key="secrets:set">console.command.secrets_set</argument>
        <argument key="secrets:remove">console.command.secrets_remove</argument>
        <argument key="secrets:generate-keys">console.command.secrets_generate_key</argument>
        <argument key="secrets:list">console.command.secrets_list</argument>
        <argument key="secrets:reveal">console.command.secrets_reveal</argument>
        <argument key="secrets:decrypt-to-local">console.command.secrets_decrypt_to_local</argument>
        <argument key="secrets:encrypt-from-local">console.command.secrets_encrypt_from_local</argument>
      </argument>
    </service>
    <service id=".service_locator.13gwAf1" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="console.command.about" type="service_closure" id=".console.command.about.lazy"/>
        <argument key="console.command.assets_install" type="service_closure" id=".console.command.assets_install.lazy"/>
        <argument key="console.command.cache_clear" type="service_closure" id=".console.command.cache_clear.lazy"/>
        <argument key="console.command.cache_pool_clear" type="service_closure" id=".console.command.cache_pool_clear.lazy"/>
        <argument key="console.command.cache_pool_prune" type="service_closure" id=".console.command.cache_pool_prune.lazy"/>
        <argument key="console.command.cache_pool_invalidate_tags" type="service_closure" id=".console.command.cache_pool_invalidate_tags.lazy"/>
        <argument key="console.command.cache_pool_delete" type="service_closure" id=".console.command.cache_pool_delete.lazy"/>
        <argument key="console.command.cache_pool_list" type="service_closure" id=".console.command.cache_pool_list.lazy"/>
        <argument key="console.command.cache_warmup" type="service_closure" id=".console.command.cache_warmup.lazy"/>
        <argument key="console.command.config_debug" type="service_closure" id=".console.command.config_debug.lazy"/>
        <argument key="console.command.config_dump_reference" type="service_closure" id=".console.command.config_dump_reference.lazy"/>
        <argument key="console.command.container_debug" type="service_closure" id=".console.command.container_debug.lazy"/>
        <argument key="console.command.container_lint" type="service_closure" id=".console.command.container_lint.lazy"/>
        <argument key="console.command.debug_autowiring" type="service_closure" id=".console.command.debug_autowiring.lazy"/>
        <argument key="console.command.dotenv_debug" type="service_closure" id=".console.command.dotenv_debug.lazy"/>
        <argument key="console.command.event_dispatcher_debug" type="service_closure" id=".console.command.event_dispatcher_debug.lazy"/>
        <argument key="console.command.messenger_consume_messages" type="service_closure" id=".console.command.messenger_consume_messages.lazy"/>
        <argument key="console.command.messenger_setup_transports" type="service_closure" id=".console.command.messenger_setup_transports.lazy"/>
        <argument key="console.command.messenger_debug" type="service_closure" id=".console.command.messenger_debug.lazy"/>
        <argument key="console.command.messenger_stop_workers" type="service_closure" id=".console.command.messenger_stop_workers.lazy"/>
        <argument key="console.command.messenger_stats" type="service_closure" id=".console.command.messenger_stats.lazy"/>
        <argument key="console.command.router_debug" type="service_closure" id=".console.command.router_debug.lazy"/>
        <argument key="console.command.router_match" type="service_closure" id=".console.command.router_match.lazy"/>
        <argument key="console.command.validator_debug" type="service_closure" id=".console.command.validator_debug.lazy"/>
        <argument key="console.command.xliff_lint" type="service_closure" id=".console.command.xliff_lint.lazy"/>
        <argument key="console.command.yaml_lint" type="service_closure" id=".console.command.yaml_lint.lazy"/>
        <argument key="console.command.secrets_set" type="service_closure" id=".console.command.secrets_set.lazy"/>
        <argument key="console.command.secrets_remove" type="service_closure" id=".console.command.secrets_remove.lazy"/>
        <argument key="console.command.secrets_generate_key" type="service_closure" id=".console.command.secrets_generate_key.lazy"/>
        <argument key="console.command.secrets_list" type="service_closure" id=".console.command.secrets_list.lazy"/>
        <argument key="console.command.secrets_reveal" type="service_closure" id=".console.command.secrets_reveal.lazy"/>
        <argument key="console.command.secrets_decrypt_to_local" type="service_closure" id=".console.command.secrets_decrypt_to_local.lazy"/>
        <argument key="console.command.secrets_encrypt_from_local" type="service_closure" id=".console.command.secrets_encrypt_from_local.lazy"/>
      </argument>
    </service>
    <service id="CodelyTv\Shared\Domain\Bus\Event\EventBus" alias="CodelyTv\Shared\Infrastructure\Bus\Event\InMemory\InMemorySymfonyEventBus"/>
    <service id="CodelyTv\Backoffice\Courses\Domain\BackofficeCourseRepository" alias="CodelyTv\Backoffice\Courses\Infrastructure\Persistence\ElasticsearchBackofficeCourseRepository"/>
    <service id="CodelyTv\Shared\Domain\Bus\Command\Command" alias="CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommand"/>
    <service id="CodelyTv\Shared\Domain\Bus\Command\CommandBus" alias="CodelyTv\Shared\Infrastructure\Bus\Command\InMemorySymfonyCommandBus"/>
    <service id="CodelyTv\Shared\Domain\Bus\Command\CommandHandler" alias="CodelyTv\Backoffice\Auth\Application\Authenticate\AuthenticateUserCommandHandler"/>
    <service id="CodelyTv\Shared\Domain\Bus\Event\DomainEventSubscriber" alias="CodelyTv\Backoffice\Courses\Application\Create\CreateBackofficeCourseOnCourseCreated"/>
    <service id="CodelyTv\Shared\Domain\Bus\Query\QueryBus" alias="CodelyTv\Shared\Infrastructure\Bus\Query\InMemorySymfonyQueryBus"/>
    <service id="CodelyTv\Shared\Domain\Bus\Query\Response" alias="CodelyTv\Backoffice\Courses\Application\BackofficeCoursesResponse"/>
    <service id="CodelyTv\Shared\Domain\Logger" alias="CodelyTv\Shared\Infrastructure\Logger\MonologLogger"/>
    <service id="CodelyTv\Shared\Domain\RandomNumberGenerator" alias="CodelyTv\Shared\Infrastructure\PhpRandomNumberGenerator"/>
    <service id="CodelyTv\Shared\Domain\UuidGenerator" alias="CodelyTv\Shared\Infrastructure\RamseyUuidGenerator"/>
    <service id="CodelyTv\Backoffice\Auth\Domain\AuthRepository" alias="CodelyTv\Backoffice\Auth\Infrastructure\Persistence\InMemoryAuthRepository"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface" alias="parameter_bag"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface" alias="parameter_bag"/>
    <service id="Symfony\Component\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher"/>
    <service id="Symfony\Contracts\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher"/>
    <service id="Psr\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher"/>
    <service id="Symfony\Component\HttpKernel\HttpKernelInterface" alias="http_kernel"/>
    <service id="Symfony\Component\HttpFoundation\RequestStack" alias="request_stack"/>
    <service id="Symfony\Component\HttpKernel\HttpCache\StoreInterface" alias="http_cache.store"/>
    <service id="Symfony\Component\HttpFoundation\UrlHelper" alias="url_helper"/>
    <service id="Symfony\Component\HttpKernel\KernelInterface" alias="kernel"/>
    <service id="Symfony\Component\Filesystem\Filesystem" alias="filesystem"/>
    <service id="Symfony\Component\HttpKernel\Config\FileLocator" alias="file_locator"/>
    <service id="Symfony\Component\HttpFoundation\UriSigner" alias="uri_signer"/>
    <service id="Symfony\Component\DependencyInjection\ReverseContainer" alias="reverse_container"/>
    <service id="Symfony\Component\String\Slugger\SluggerInterface" alias="slugger"/>
    <service id="Symfony\Component\Clock\ClockInterface" alias="clock"/>
    <service id="Psr\Clock\ClockInterface" alias="clock"/>
    <service id="Symfony\Component\HttpKernel\Fragment\FragmentUriGeneratorInterface" alias="fragment.uri_generator"/>
    <service id="error_renderer.html" alias="error_handler.error_renderer.html"/>
    <service id="error_renderer" alias="error_handler.error_renderer.html"/>
    <service id=".Psr\Container\ContainerInterface $parameter_bag" alias="parameter_bag"/>
    <service id="Psr\Container\ContainerInterface $parameterBag" alias="parameter_bag"/>
    <service id="cache.app_clearer" alias="cache.default_clearer" public="true"/>
    <service id="Psr\Cache\CacheItemPoolInterface" alias="cache.app"/>
    <service id="Symfony\Contracts\Cache\CacheInterface" alias="cache.app"/>
    <service id="Symfony\Contracts\Cache\TagAwareCacheInterface" alias="cache.app.taggable"/>
    <service id="Symfony\Contracts\Translation\TranslatorInterface" alias="translator"/>
    <service id="Symfony\Component\ErrorHandler\ErrorRenderer\FileLinkFormatter" alias="debug.file_link_formatter"/>
    <service id="router" alias="router.default" public="true"/>
    <service id="Symfony\Component\Routing\RouterInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\Generator\UrlGeneratorInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\Matcher\UrlMatcherInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\RequestContextAwareInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\RequestContext" alias="router.request_context"/>
    <service id="cache.default_redis_provider" alias=".cache_connection.MfCypIA"/>
    <service id="cache.default_memcached_provider" alias=".cache_connection.8kvDmRs"/>
    <service id="cache.default_doctrine_dbal_provider" alias="database_connection"/>
    <service id="SessionHandlerInterface" alias="session.handler.native"/>
    <service id="session.storage.factory" alias="session.storage.factory.native"/>
    <service id="session.handler" alias="session.handler.native"/>
    <service id="session_listener" alias="test.session.listener"/>
    <service id="Symfony\Component\Validator\Validator\ValidatorInterface" alias="validator"/>
    <service id="validator.mapping.class_metadata_factory" alias="validator"/>
    <service id="messenger.default_serializer" alias="messenger.transport.native_php_serializer"/>
    <service id="messenger.default_bus" alias="messenger.bus.default" public="true"/>
    <service id="Symfony\Component\Messenger\MessageBusInterface" alias="messenger.bus.default"/>
    <service id="Behat\Mink\Mink" alias="behat.mink"/>
    <service id="Behat\Mink\Session" alias="behat.mink.default_session"/>
    <service id="FriendsOfBehat\SymfonyExtension\Mink\MinkParameters" alias="behat.mink.parameters"/>
    <service id=".Symfony\Component\DependencyInjection\ContainerInterface $driver container" alias="behat.driver.service_container"/>
    <service id="Symfony\Component\DependencyInjection\ContainerInterface $driverContainer" alias="behat.driver.service_container"/>
    <service id="container.env_var_processors_locator" alias=".service_locator.pRu6x_4" public="true"/>
    <service id="argument_resolver.controller_locator" alias=".service_locator.Sr6W89v"/>
    <service id="Psr\Log\LoggerInterface" alias="logger"/>
    <service id="Symfony\Bundle\FrameworkBundle\KernelBrowser" alias="test.client"/>
    <service id="Symfony\Component\HttpKernel\HttpKernelBrowser" alias="test.client"/>
    <service id=".service_locator.GIuJv7e" alias="messenger.retry_strategy_locator"/>
    <service id=".service_locator.diNoEIK" alias=".service_locator.4wc4Ag1"/>
  </services>
</container>
